
DIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000288  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000896  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066e  00000000  00000000  00000c46  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004bb  00000000  00000000  000012b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00001770  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b3  00000000  00000000  00001808  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000354  00000000  00000000  00001bbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001f0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 20 01 	call	0x240	; 0x240 <main>
  64:	0c 94 42 01 	jmp	0x284	; 0x284 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_SetPinDirection>:
#include "DIO.h"
#include "registers.h"
#include "macros.h"
extern void DIO_SetPinDirection(u8 port,u8 pin,u8 Dir)
{
	switch(port)
  6c:	81 30       	cpi	r24, 0x01	; 1
  6e:	11 f1       	breq	.+68     	; 0xb4 <DIO_SetPinDirection+0x48>
  70:	30 f0       	brcs	.+12     	; 0x7e <DIO_SetPinDirection+0x12>
  72:	82 30       	cpi	r24, 0x02	; 2
  74:	d1 f1       	breq	.+116    	; 0xea <DIO_SetPinDirection+0x7e>
  76:	83 30       	cpi	r24, 0x03	; 3
  78:	09 f4       	brne	.+2      	; 0x7c <DIO_SetPinDirection+0x10>
  7a:	52 c0       	rjmp	.+164    	; 0x120 <DIO_SetPinDirection+0xb4>
  7c:	08 95       	ret
	{
		case a :
		if (Dir==OUTPUT)
  7e:	41 30       	cpi	r20, 0x01	; 1
  80:	59 f4       	brne	.+22     	; 0x98 <DIO_SetPinDirection+0x2c>
		{
			set_bit(DDRA,pin);	
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	02 c0       	rjmp	.+4      	; 0x8c <DIO_SetPinDirection+0x20>
  88:	88 0f       	add	r24, r24
  8a:	99 1f       	adc	r25, r25
  8c:	6a 95       	dec	r22
  8e:	e2 f7       	brpl	.-8      	; 0x88 <DIO_SetPinDirection+0x1c>
  90:	9a b3       	in	r25, 0x1a	; 26
  92:	89 2b       	or	r24, r25
  94:	8a bb       	out	0x1a, r24	; 26
  96:	08 95       	ret
		}
		if (Dir==INPUT)
  98:	41 11       	cpse	r20, r1
  9a:	5c c0       	rjmp	.+184    	; 0x154 <DIO_SetPinDirection+0xe8>
		{
			clr_bit(DDRA,pin);
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <DIO_SetPinDirection+0x3a>
  a2:	88 0f       	add	r24, r24
  a4:	99 1f       	adc	r25, r25
  a6:	6a 95       	dec	r22
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <DIO_SetPinDirection+0x36>
  aa:	80 95       	com	r24
  ac:	9a b3       	in	r25, 0x1a	; 26
  ae:	89 23       	and	r24, r25
  b0:	8a bb       	out	0x1a, r24	; 26
  b2:	08 95       	ret
		}
		break;
		case b :
		if (Dir==OUTPUT)
  b4:	41 30       	cpi	r20, 0x01	; 1
  b6:	59 f4       	brne	.+22     	; 0xce <DIO_SetPinDirection+0x62>
		{
			set_bit(DDRB,pin);
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_SetPinDirection+0x56>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_SetPinDirection+0x52>
  c6:	97 b3       	in	r25, 0x17	; 23
  c8:	89 2b       	or	r24, r25
  ca:	87 bb       	out	0x17, r24	; 23
  cc:	08 95       	ret
		}
		if (Dir==INPUT)
  ce:	41 11       	cpse	r20, r1
  d0:	41 c0       	rjmp	.+130    	; 0x154 <DIO_SetPinDirection+0xe8>
		{
			clr_bit(DDRB,pin);
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_SetPinDirection+0x70>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_SetPinDirection+0x6c>
  e0:	80 95       	com	r24
  e2:	97 b3       	in	r25, 0x17	; 23
  e4:	89 23       	and	r24, r25
  e6:	87 bb       	out	0x17, r24	; 23
  e8:	08 95       	ret
		}
		break;
		case c :
		if (Dir==OUTPUT)
  ea:	41 30       	cpi	r20, 0x01	; 1
  ec:	59 f4       	brne	.+22     	; 0x104 <DIO_SetPinDirection+0x98>
		{
			set_bit(DDRC,pin);
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_SetPinDirection+0x8c>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_SetPinDirection+0x88>
  fc:	94 b3       	in	r25, 0x14	; 20
  fe:	89 2b       	or	r24, r25
 100:	84 bb       	out	0x14, r24	; 20
 102:	08 95       	ret
		}
		if (Dir==INPUT)
 104:	41 11       	cpse	r20, r1
 106:	26 c0       	rjmp	.+76     	; 0x154 <DIO_SetPinDirection+0xe8>
		{
			clr_bit(DDRC,pin);
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_SetPinDirection+0xa6>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_SetPinDirection+0xa2>
 116:	80 95       	com	r24
 118:	94 b3       	in	r25, 0x14	; 20
 11a:	89 23       	and	r24, r25
 11c:	84 bb       	out	0x14, r24	; 20
 11e:	08 95       	ret
		}
		break;
		case d :
		if (Dir==OUTPUT)
 120:	41 30       	cpi	r20, 0x01	; 1
 122:	59 f4       	brne	.+22     	; 0x13a <DIO_SetPinDirection+0xce>
		{
			set_bit(DDRD,pin);
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_SetPinDirection+0xc2>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_SetPinDirection+0xbe>
 132:	91 b3       	in	r25, 0x11	; 17
 134:	89 2b       	or	r24, r25
 136:	81 bb       	out	0x11, r24	; 17
 138:	08 95       	ret
		}
		if (Dir==INPUT)
 13a:	41 11       	cpse	r20, r1
 13c:	0b c0       	rjmp	.+22     	; 0x154 <DIO_SetPinDirection+0xe8>
		{
			clr_bit(DDRD,pin);
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	02 c0       	rjmp	.+4      	; 0x148 <DIO_SetPinDirection+0xdc>
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	6a 95       	dec	r22
 14a:	e2 f7       	brpl	.-8      	; 0x144 <DIO_SetPinDirection+0xd8>
 14c:	80 95       	com	r24
 14e:	91 b3       	in	r25, 0x11	; 17
 150:	89 23       	and	r24, r25
 152:	81 bb       	out	0x11, r24	; 17
 154:	08 95       	ret

00000156 <DIO_WritePinValue>:
	}
}
extern void DIO_WritePinValue(u8 port,u8 pin,u8 value)
{
	
switch(port)
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	11 f1       	breq	.+68     	; 0x19e <DIO_WritePinValue+0x48>
 15a:	30 f0       	brcs	.+12     	; 0x168 <DIO_WritePinValue+0x12>
 15c:	82 30       	cpi	r24, 0x02	; 2
 15e:	d1 f1       	breq	.+116    	; 0x1d4 <DIO_WritePinValue+0x7e>
 160:	83 30       	cpi	r24, 0x03	; 3
 162:	09 f4       	brne	.+2      	; 0x166 <DIO_WritePinValue+0x10>
 164:	52 c0       	rjmp	.+164    	; 0x20a <DIO_WritePinValue+0xb4>
 166:	08 95       	ret
{
	case a :
	if (value==HIGH)
 168:	41 30       	cpi	r20, 0x01	; 1
 16a:	59 f4       	brne	.+22     	; 0x182 <DIO_WritePinValue+0x2c>
	{
		set_bit(PORTA,pin);
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_WritePinValue+0x20>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_WritePinValue+0x1c>
 17a:	9b b3       	in	r25, 0x1b	; 27
 17c:	89 2b       	or	r24, r25
 17e:	8b bb       	out	0x1b, r24	; 27
 180:	08 95       	ret
	}
	if (value==LOW)
 182:	41 11       	cpse	r20, r1
 184:	5c c0       	rjmp	.+184    	; 0x23e <DIO_WritePinValue+0xe8>
	{
		clr_bit(PORTA,pin);
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_WritePinValue+0x3a>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_WritePinValue+0x36>
 194:	80 95       	com	r24
 196:	9b b3       	in	r25, 0x1b	; 27
 198:	89 23       	and	r24, r25
 19a:	8b bb       	out	0x1b, r24	; 27
 19c:	08 95       	ret
	}
	break;
	case b :
	if (value==HIGH)
 19e:	41 30       	cpi	r20, 0x01	; 1
 1a0:	59 f4       	brne	.+22     	; 0x1b8 <DIO_WritePinValue+0x62>
	{
		set_bit(PORTB,pin);
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_WritePinValue+0x56>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	6a 95       	dec	r22
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_WritePinValue+0x52>
 1b0:	98 b3       	in	r25, 0x18	; 24
 1b2:	89 2b       	or	r24, r25
 1b4:	88 bb       	out	0x18, r24	; 24
 1b6:	08 95       	ret
	}
	if (value==LOW)
 1b8:	41 11       	cpse	r20, r1
 1ba:	41 c0       	rjmp	.+130    	; 0x23e <DIO_WritePinValue+0xe8>
	{
		clr_bit(PORTB,pin);
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_WritePinValue+0x70>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	6a 95       	dec	r22
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_WritePinValue+0x6c>
 1ca:	80 95       	com	r24
 1cc:	98 b3       	in	r25, 0x18	; 24
 1ce:	89 23       	and	r24, r25
 1d0:	88 bb       	out	0x18, r24	; 24
 1d2:	08 95       	ret
	}
	break;
	case c :
	if (value==HIGH)
 1d4:	41 30       	cpi	r20, 0x01	; 1
 1d6:	59 f4       	brne	.+22     	; 0x1ee <DIO_WritePinValue+0x98>
	{
		set_bit(PORTC,pin);
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_WritePinValue+0x8c>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_WritePinValue+0x88>
 1e6:	95 b3       	in	r25, 0x15	; 21
 1e8:	89 2b       	or	r24, r25
 1ea:	85 bb       	out	0x15, r24	; 21
 1ec:	08 95       	ret
	}
	if (value==LOW)
 1ee:	41 11       	cpse	r20, r1
 1f0:	26 c0       	rjmp	.+76     	; 0x23e <DIO_WritePinValue+0xe8>
	{
		clr_bit(PORTC,pin);
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_WritePinValue+0xa6>
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	6a 95       	dec	r22
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_WritePinValue+0xa2>
 200:	80 95       	com	r24
 202:	95 b3       	in	r25, 0x15	; 21
 204:	89 23       	and	r24, r25
 206:	85 bb       	out	0x15, r24	; 21
 208:	08 95       	ret
	}
	break;
	case d :
	if (value==HIGH)
 20a:	41 30       	cpi	r20, 0x01	; 1
 20c:	59 f4       	brne	.+22     	; 0x224 <DIO_WritePinValue+0xce>
	{
		set_bit(PORTD,pin);
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_WritePinValue+0xc2>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	6a 95       	dec	r22
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_WritePinValue+0xbe>
 21c:	92 b3       	in	r25, 0x12	; 18
 21e:	89 2b       	or	r24, r25
 220:	82 bb       	out	0x12, r24	; 18
 222:	08 95       	ret
	}
	if (value==LOW)
 224:	41 11       	cpse	r20, r1
 226:	0b c0       	rjmp	.+22     	; 0x23e <DIO_WritePinValue+0xe8>
	{
		clr_bit(PORTD,pin);
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_WritePinValue+0xdc>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_WritePinValue+0xd8>
 236:	80 95       	com	r24
 238:	92 b3       	in	r25, 0x12	; 18
 23a:	89 23       	and	r24, r25
 23c:	82 bb       	out	0x12, r24	; 18
 23e:	08 95       	ret

00000240 <main>:
#include "registers.h"
#include "macros.h"
#include "DIO.h"
int main(void)
{
    DIO_SetPinDirection(a,pin0,OUTPUT);
 240:	41 e0       	ldi	r20, 0x01	; 1
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	
    while (1) 
    {
		DIO_WritePinValue(a,pin0,HIGH);
 24a:	41 e0       	ldi	r20, 0x01	; 1
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_WritePinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 254:	2f e3       	ldi	r18, 0x3F	; 63
 256:	8d e0       	ldi	r24, 0x0D	; 13
 258:	93 e0       	ldi	r25, 0x03	; 3
 25a:	21 50       	subi	r18, 0x01	; 1
 25c:	80 40       	sbci	r24, 0x00	; 0
 25e:	90 40       	sbci	r25, 0x00	; 0
 260:	e1 f7       	brne	.-8      	; 0x25a <main+0x1a>
 262:	00 c0       	rjmp	.+0      	; 0x264 <main+0x24>
 264:	00 00       	nop
		_delay_ms(1000);
		DIO_WritePinValue(a,pin0,LOW);
 266:	40 e0       	ldi	r20, 0x00	; 0
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_WritePinValue>
 270:	2f e3       	ldi	r18, 0x3F	; 63
 272:	8d e0       	ldi	r24, 0x0D	; 13
 274:	93 e0       	ldi	r25, 0x03	; 3
 276:	21 50       	subi	r18, 0x01	; 1
 278:	80 40       	sbci	r24, 0x00	; 0
 27a:	90 40       	sbci	r25, 0x00	; 0
 27c:	e1 f7       	brne	.-8      	; 0x276 <main+0x36>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <main+0x40>
 280:	00 00       	nop
 282:	e3 cf       	rjmp	.-58     	; 0x24a <main+0xa>

00000284 <_exit>:
 284:	f8 94       	cli

00000286 <__stop_program>:
 286:	ff cf       	rjmp	.-2      	; 0x286 <__stop_program>
