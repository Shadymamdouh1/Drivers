
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000098a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000098a  000009fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000005c  00000000  00000000  00000a08  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a64  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f89  00000000  00000000  00000b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000082c  00000000  00000000  00001af1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007b0  00000000  00000000  0000231d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000017c  00000000  00000000  00002ad0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046e  00000000  00000000  00002c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000065f  00000000  00000000  000030ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00003719  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e8       	ldi	r30, 0x8A	; 138
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 c3 01 	call	0x386	; 0x386 <main>
  7a:	0c 94 c3 04 	jmp	0x986	; 0x986 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_WritePinValue>:
		case d :
		x= get_bit(PIND,pin);
		break;
	}
	return x;
}
  82:	81 30       	cpi	r24, 0x01	; 1
  84:	11 f1       	breq	.+68     	; 0xca <DIO_WritePinValue+0x48>
  86:	30 f0       	brcs	.+12     	; 0x94 <DIO_WritePinValue+0x12>
  88:	82 30       	cpi	r24, 0x02	; 2
  8a:	d1 f1       	breq	.+116    	; 0x100 <DIO_WritePinValue+0x7e>
  8c:	83 30       	cpi	r24, 0x03	; 3
  8e:	09 f4       	brne	.+2      	; 0x92 <DIO_WritePinValue+0x10>
  90:	52 c0       	rjmp	.+164    	; 0x136 <DIO_WritePinValue+0xb4>
  92:	08 95       	ret
  94:	41 30       	cpi	r20, 0x01	; 1
  96:	59 f4       	brne	.+22     	; 0xae <DIO_WritePinValue+0x2c>
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <DIO_WritePinValue+0x20>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <DIO_WritePinValue+0x1c>
  a6:	9b b3       	in	r25, 0x1b	; 27
  a8:	89 2b       	or	r24, r25
  aa:	8b bb       	out	0x1b, r24	; 27
  ac:	08 95       	ret
  ae:	41 11       	cpse	r20, r1
  b0:	5c c0       	rjmp	.+184    	; 0x16a <DIO_WritePinValue+0xe8>
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <DIO_WritePinValue+0x3a>
  b8:	88 0f       	add	r24, r24
  ba:	99 1f       	adc	r25, r25
  bc:	6a 95       	dec	r22
  be:	e2 f7       	brpl	.-8      	; 0xb8 <DIO_WritePinValue+0x36>
  c0:	80 95       	com	r24
  c2:	9b b3       	in	r25, 0x1b	; 27
  c4:	89 23       	and	r24, r25
  c6:	8b bb       	out	0x1b, r24	; 27
  c8:	08 95       	ret
  ca:	41 30       	cpi	r20, 0x01	; 1
  cc:	59 f4       	brne	.+22     	; 0xe4 <DIO_WritePinValue+0x62>
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <DIO_WritePinValue+0x56>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	6a 95       	dec	r22
  da:	e2 f7       	brpl	.-8      	; 0xd4 <DIO_WritePinValue+0x52>
  dc:	98 b3       	in	r25, 0x18	; 24
  de:	89 2b       	or	r24, r25
  e0:	88 bb       	out	0x18, r24	; 24
  e2:	08 95       	ret
  e4:	41 11       	cpse	r20, r1
  e6:	41 c0       	rjmp	.+130    	; 0x16a <DIO_WritePinValue+0xe8>
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_WritePinValue+0x70>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	6a 95       	dec	r22
  f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_WritePinValue+0x6c>
  f6:	80 95       	com	r24
  f8:	98 b3       	in	r25, 0x18	; 24
  fa:	89 23       	and	r24, r25
  fc:	88 bb       	out	0x18, r24	; 24
  fe:	08 95       	ret
 100:	41 30       	cpi	r20, 0x01	; 1
 102:	59 f4       	brne	.+22     	; 0x11a <DIO_WritePinValue+0x98>
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_WritePinValue+0x8c>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_WritePinValue+0x88>
 112:	95 b3       	in	r25, 0x15	; 21
 114:	89 2b       	or	r24, r25
 116:	85 bb       	out	0x15, r24	; 21
 118:	08 95       	ret
 11a:	41 11       	cpse	r20, r1
 11c:	26 c0       	rjmp	.+76     	; 0x16a <DIO_WritePinValue+0xe8>
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_WritePinValue+0xa6>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_WritePinValue+0xa2>
 12c:	80 95       	com	r24
 12e:	95 b3       	in	r25, 0x15	; 21
 130:	89 23       	and	r24, r25
 132:	85 bb       	out	0x15, r24	; 21
 134:	08 95       	ret
 136:	41 30       	cpi	r20, 0x01	; 1
 138:	59 f4       	brne	.+22     	; 0x150 <DIO_WritePinValue+0xce>
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_WritePinValue+0xc2>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_WritePinValue+0xbe>
 148:	92 b3       	in	r25, 0x12	; 18
 14a:	89 2b       	or	r24, r25
 14c:	82 bb       	out	0x12, r24	; 18
 14e:	08 95       	ret
 150:	41 11       	cpse	r20, r1
 152:	0b c0       	rjmp	.+22     	; 0x16a <DIO_WritePinValue+0xe8>
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_WritePinValue+0xdc>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_WritePinValue+0xd8>
 162:	80 95       	com	r24
 164:	92 b3       	in	r25, 0x12	; 18
 166:	89 23       	and	r24, r25
 168:	82 bb       	out	0x12, r24	; 18
 16a:	08 95       	ret

0000016c <DIO_SetPortDirection>:
extern void DIO_SetPortDirection(u8 port,u8 Dir)
{
	switch(port)
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	79 f0       	breq	.+30     	; 0x18e <DIO_SetPortDirection+0x22>
 170:	28 f0       	brcs	.+10     	; 0x17c <DIO_SetPortDirection+0x10>
 172:	82 30       	cpi	r24, 0x02	; 2
 174:	a9 f0       	breq	.+42     	; 0x1a0 <DIO_SetPortDirection+0x34>
 176:	83 30       	cpi	r24, 0x03	; 3
 178:	e1 f0       	breq	.+56     	; 0x1b2 <DIO_SetPortDirection+0x46>
 17a:	08 95       	ret
	{
		case a :
		if (Dir == OUTPUT)
 17c:	61 30       	cpi	r22, 0x01	; 1
 17e:	19 f4       	brne	.+6      	; 0x186 <DIO_SetPortDirection+0x1a>
		{
			DDRA=0XFF;	
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	8a bb       	out	0x1a, r24	; 26
 184:	08 95       	ret
		}
		if (Dir == INPUT)
 186:	61 11       	cpse	r22, r1
 188:	1c c0       	rjmp	.+56     	; 0x1c2 <DIO_SetPortDirection+0x56>
		{
			DDRA=0X00;
 18a:	1a ba       	out	0x1a, r1	; 26
 18c:	08 95       	ret
		}
		break;
		case b :
		if (Dir == OUTPUT)
 18e:	61 30       	cpi	r22, 0x01	; 1
 190:	19 f4       	brne	.+6      	; 0x198 <DIO_SetPortDirection+0x2c>
		{
			DDRB=0XFF;
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	87 bb       	out	0x17, r24	; 23
 196:	08 95       	ret
		}
		if (Dir == INPUT)
 198:	61 11       	cpse	r22, r1
 19a:	13 c0       	rjmp	.+38     	; 0x1c2 <DIO_SetPortDirection+0x56>
		{
			DDRB=0X00;
 19c:	17 ba       	out	0x17, r1	; 23
 19e:	08 95       	ret
		}
		break;
		case c :
		if (Dir == OUTPUT)
 1a0:	61 30       	cpi	r22, 0x01	; 1
 1a2:	19 f4       	brne	.+6      	; 0x1aa <DIO_SetPortDirection+0x3e>
		{
			DDRC=0XFF;
 1a4:	8f ef       	ldi	r24, 0xFF	; 255
 1a6:	84 bb       	out	0x14, r24	; 20
 1a8:	08 95       	ret
		}
		if (Dir == INPUT)
 1aa:	61 11       	cpse	r22, r1
 1ac:	0a c0       	rjmp	.+20     	; 0x1c2 <DIO_SetPortDirection+0x56>
		{
			DDRC=0X00;
 1ae:	14 ba       	out	0x14, r1	; 20
 1b0:	08 95       	ret
		}
		break;
		case d :
		if (Dir == OUTPUT)
 1b2:	61 30       	cpi	r22, 0x01	; 1
 1b4:	19 f4       	brne	.+6      	; 0x1bc <DIO_SetPortDirection+0x50>
		{
			DDRD=0XFF;
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	81 bb       	out	0x11, r24	; 17
 1ba:	08 95       	ret
		}
		if (Dir == INPUT)
 1bc:	61 11       	cpse	r22, r1
 1be:	01 c0       	rjmp	.+2      	; 0x1c2 <DIO_SetPortDirection+0x56>
		{
			DDRD=0X00;
 1c0:	11 ba       	out	0x11, r1	; 17
 1c2:	08 95       	ret

000001c4 <DIO_WritePortValue>:
		break;
	}
}
extern void DIO_WritePortValue(u8 port,u8 value)
{
	switch(port)
 1c4:	81 30       	cpi	r24, 0x01	; 1
 1c6:	41 f0       	breq	.+16     	; 0x1d8 <DIO_WritePortValue+0x14>
 1c8:	28 f0       	brcs	.+10     	; 0x1d4 <DIO_WritePortValue+0x10>
 1ca:	82 30       	cpi	r24, 0x02	; 2
 1cc:	39 f0       	breq	.+14     	; 0x1dc <DIO_WritePortValue+0x18>
 1ce:	83 30       	cpi	r24, 0x03	; 3
 1d0:	39 f0       	breq	.+14     	; 0x1e0 <DIO_WritePortValue+0x1c>
 1d2:	08 95       	ret
	{
		case a :
		PORTA =value;
 1d4:	6b bb       	out	0x1b, r22	; 27
		break;
 1d6:	08 95       	ret
		case b :
		PORTB=value;
 1d8:	68 bb       	out	0x18, r22	; 24
		break;
 1da:	08 95       	ret
		case c :
		PORTC=value;
 1dc:	65 bb       	out	0x15, r22	; 21
		break;
 1de:	08 95       	ret
		case d :
		PORTD=value;
 1e0:	62 bb       	out	0x12, r22	; 18
 1e2:	08 95       	ret

000001e4 <LCD_Kick>:
	DIO_SetPortDirection(LCD_Data_Port,INPUT);
	DIO_WritePinValue(LCD_Control_Port,LCD_SR_bit,LOW);  // SR =0
	DIO_WritePinValue(LCD_Control_Port,LCD_RW_bit,HIGH);  // R/W =1 (READ MODE)
	DIO_WritePinValue(LCD_Control_Port,LCD_EN_bit,HIGH);   // EN 
	while(DIO_GetPinValue(LCD_Data_Port,7));  // IF BIT 7 IS LOGIC 1 thats means the LCD is busy so loop till become 0
	DIO_WritePinValue(LCD_Control_Port,LCD_EN_bit,LOW);
 1e4:	41 e0       	ldi	r20, 0x01	; 1
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePinValue>
 1ee:	83 ed       	ldi	r24, 0xD3	; 211
 1f0:	90 e3       	ldi	r25, 0x30	; 48
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <LCD_Kick+0xe>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <LCD_Kick+0x14>
 1f8:	00 00       	nop
 1fa:	40 e0       	ldi	r20, 0x00	; 0
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePinValue>
 204:	08 95       	ret

00000206 <LCD_send_command>:
 206:	cf 93       	push	r28
 208:	c8 2f       	mov	r28, r24
 20a:	61 e0       	ldi	r22, 0x01	; 1
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_SetPortDirection>
 212:	40 e0       	ldi	r20, 0x00	; 0
 214:	62 e0       	ldi	r22, 0x02	; 2
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePinValue>
 21c:	40 e0       	ldi	r20, 0x00	; 0
 21e:	60 e0       	ldi	r22, 0x00	; 0
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePinValue>
 226:	6c 2f       	mov	r22, r28
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <DIO_WritePortValue>
 22e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCD_Kick>
 232:	cf 91       	pop	r28
 234:	08 95       	ret

00000236 <LCD_display_charcter>:
	LCD_send_command(LCD_ENTRY_INC_MODE);
	LCD_send_command(0x80);    // start from row 0 position 0
	LCD_send_command(LCD_DIS_ON_CURSOR_BLINK);
}
extern void LCD_display_charcter(u8 data)
{
 236:	cf 93       	push	r28
 238:	c8 2f       	mov	r28, r24
	//LCD_is_busy();
	DIO_SetPortDirection(LCD_Data_Port,OUTPUT);
 23a:	61 e0       	ldi	r22, 0x01	; 1
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_SetPortDirection>
	DIO_WritePinValue(LCD_Control_Port,LCD_SR_bit,HIGH);  // SR =1
 242:	41 e0       	ldi	r20, 0x01	; 1
 244:	62 e0       	ldi	r22, 0x02	; 2
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePinValue>
	DIO_WritePinValue(LCD_Control_Port,LCD_RW_bit,LOW);  // R/W =0 (WRITE MODE)
 24c:	40 e0       	ldi	r20, 0x00	; 0
 24e:	60 e0       	ldi	r22, 0x00	; 0
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePinValue>
	
	//8 BIT MODE
	#ifdef LCD_mode_8bit
	DIO_WritePortValue(LCD_Data_Port,data);
 256:	6c 2f       	mov	r22, r28
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <DIO_WritePortValue>
	LCD_Kick();
 25e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCD_Kick>
	LCD_Kick();
	DIO_WritePortValue(LCD_Data_Port,data<<4);   // second 4 bits after shift left
	LCD_Kick();
	#endif
	//LCD_send_command(LCD_MOVE_CURSOR_RIGHT);
}
 262:	cf 91       	pop	r28
 264:	08 95       	ret

00000266 <LCD_clear_screen>:
	 sprintf(str,"%d",number);
	 LCD_display_String(str);
}
extern void LCD_clear_screen(void)
{
	LCD_send_command(LCD_CLR_DIS_AND_DDRAM);
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	0e 94 03 01 	call	0x206	; 0x206 <LCD_send_command>
 26c:	08 95       	ret

0000026e <LCD_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26e:	87 e8       	ldi	r24, 0x87	; 135
 270:	93 e1       	ldi	r25, 0x13	; 19
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <LCD_init+0x4>
 276:	00 c0       	rjmp	.+0      	; 0x278 <LCD_init+0xa>
 278:	00 00       	nop
	DIO_WritePinValue(LCD_Control_Port,LCD_EN_bit,LOW);
}
extern void LCD_init(void)
{   
	_delay_ms(20);
	DIO_SetPortDirection(LCD_Data_Port,OUTPUT);
 27a:	61 e0       	ldi	r22, 0x01	; 1
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_SetPortDirection>
	DIO_SetPortDirection(LCD_Control_Port,OUTPUT);
 282:	61 e0       	ldi	r22, 0x01	; 1
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_SetPortDirection>
	DIO_WritePinValue(LCD_Control_Port,LCD_RW_bit,LOW);
 28a:	40 e0       	ldi	r20, 0x00	; 0
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePinValue>
	DIO_WritePinValue(LCD_Control_Port,LCD_EN_bit,LOW);
 294:	40 e0       	ldi	r20, 0x00	; 0
 296:	61 e0       	ldi	r22, 0x01	; 1
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePinValue>
	DIO_WritePinValue(LCD_Control_Port,LCD_SR_bit,LOW);
 29e:	40 e0       	ldi	r20, 0x00	; 0
 2a0:	62 e0       	ldi	r22, 0x02	; 2
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePinValue>
	#ifdef LCD_mode_8bit
	LCD_send_command(LCD_mode_8bit_2line);
 2a8:	88 e3       	ldi	r24, 0x38	; 56
 2aa:	0e 94 03 01 	call	0x206	; 0x206 <LCD_send_command>
	#endif
	#ifdef LCD_mode_4bit
	LCD_send_command(LCD_mode_4bit_2line);
	#endif
	LCD_clear_screen();
 2ae:	0e 94 33 01 	call	0x266	; 0x266 <LCD_clear_screen>
	LCD_send_command(LCD_ENTRY_INC_MODE);
 2b2:	86 e0       	ldi	r24, 0x06	; 6
 2b4:	0e 94 03 01 	call	0x206	; 0x206 <LCD_send_command>
	LCD_send_command(0x80);    // start from row 0 position 0
 2b8:	80 e8       	ldi	r24, 0x80	; 128
 2ba:	0e 94 03 01 	call	0x206	; 0x206 <LCD_send_command>
	LCD_send_command(LCD_DIS_ON_CURSOR_BLINK);
 2be:	8f e0       	ldi	r24, 0x0F	; 15
 2c0:	0e 94 03 01 	call	0x206	; 0x206 <LCD_send_command>
 2c4:	08 95       	ret

000002c6 <LCD_display_String>:
	LCD_Kick();
	#endif
	//LCD_send_command(LCD_MOVE_CURSOR_RIGHT);
}
extern void LCD_display_String(u8 *string)
{
 2c6:	0f 93       	push	r16
 2c8:	1f 93       	push	r17
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	d8 2f       	mov	r29, r24
 2d0:	c9 2f       	mov	r28, r25
	//LCD_is_busy();
	DIO_SetPortDirection(LCD_Data_Port,OUTPUT);
 2d2:	61 e0       	ldi	r22, 0x01	; 1
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_SetPortDirection>
	DIO_WritePinValue(LCD_Control_Port,LCD_SR_bit,HIGH);  // SR =1
 2da:	41 e0       	ldi	r20, 0x01	; 1
 2dc:	62 e0       	ldi	r22, 0x02	; 2
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePinValue>
	DIO_WritePinValue(LCD_Control_Port,LCD_RW_bit,LOW);  // R/W =0 (WRITE MODE)
 2e4:	40 e0       	ldi	r20, 0x00	; 0
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePinValue>
 2ee:	0d 2f       	mov	r16, r29
 2f0:	1c 2f       	mov	r17, r28
	u8 count=0;
 2f2:	c0 e0       	ldi	r28, 0x00	; 0
	while(*string > 0)
 2f4:	11 c0       	rjmp	.+34     	; 0x318 <LCD_display_String+0x52>
	{    
		count++;
 2f6:	cf 5f       	subi	r28, 0xFF	; 255
		 LCD_display_charcter(*string++);
 2f8:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_display_charcter>
		if (count ==16)  // first row completed
 2fc:	c0 31       	cpi	r28, 0x10	; 16
 2fe:	21 f4       	brne	.+8      	; 0x308 <LCD_display_String+0x42>
	{
		LCD_send_command(0x80+position);
	}
	else if (row == 1)
	{
		LCD_send_command(0xC0+position);
 300:	80 ec       	ldi	r24, 0xC0	; 192
 302:	0e 94 03 01 	call	0x206	; 0x206 <LCD_send_command>
 306:	08 c0       	rjmp	.+16     	; 0x318 <LCD_display_String+0x52>
		if (count ==16)  // first row completed
		{
			LCD_GoTo_xy(1,0);   // row 1 position 0
			
		}
		if (count ==32)       // LCD filled and will be cleared and start again
 308:	c0 32       	cpi	r28, 0x20	; 32
 30a:	31 f4       	brne	.+12     	; 0x318 <LCD_display_String+0x52>
		{   LCD_clear_screen();
 30c:	0e 94 33 01 	call	0x266	; 0x266 <LCD_clear_screen>
}
extern void LCD_GoTo_xy(u8 row, u8 position)
{
	if (row == 0)
	{
		LCD_send_command(0x80+position);
 310:	80 e8       	ldi	r24, 0x80	; 128
 312:	0e 94 03 01 	call	0x206	; 0x206 <LCD_send_command>
			
		}
		if (count ==32)       // LCD filled and will be cleared and start again
		{   LCD_clear_screen();
			LCD_GoTo_xy(0,0);   // row 0 position 0
			count=0;
 316:	c0 e0       	ldi	r28, 0x00	; 0
	//LCD_is_busy();
	DIO_SetPortDirection(LCD_Data_Port,OUTPUT);
	DIO_WritePinValue(LCD_Control_Port,LCD_SR_bit,HIGH);  // SR =1
	DIO_WritePinValue(LCD_Control_Port,LCD_RW_bit,LOW);  // R/W =0 (WRITE MODE)
	u8 count=0;
	while(*string > 0)
 318:	f8 01       	movw	r30, r16
 31a:	81 91       	ld	r24, Z+
 31c:	8f 01       	movw	r16, r30
 31e:	81 11       	cpse	r24, r1
 320:	ea cf       	rjmp	.-44     	; 0x2f6 <LCD_display_String+0x30>
		{   LCD_clear_screen();
			LCD_GoTo_xy(0,0);   // row 0 position 0
			count=0;
		}
	}
}
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	1f 91       	pop	r17
 328:	0f 91       	pop	r16
 32a:	08 95       	ret

0000032c <LCD_display_number>:
extern void LCD_display_number(u8 number)
{    
 32c:	0f 93       	push	r16
 32e:	1f 93       	push	r17
 330:	cf 93       	push	r28
 332:	df 93       	push	r29
 334:	cd b7       	in	r28, 0x3d	; 61
 336:	de b7       	in	r29, 0x3e	; 62
 338:	27 97       	sbiw	r28, 0x07	; 7
 33a:	0f b6       	in	r0, 0x3f	; 63
 33c:	f8 94       	cli
 33e:	de bf       	out	0x3e, r29	; 62
 340:	0f be       	out	0x3f, r0	; 63
 342:	cd bf       	out	0x3d, r28	; 61
	  u8 str[7];
	 sprintf(str,"%d",number);
 344:	1f 92       	push	r1
 346:	8f 93       	push	r24
 348:	80 e6       	ldi	r24, 0x60	; 96
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	9f 93       	push	r25
 34e:	8f 93       	push	r24
 350:	8e 01       	movw	r16, r28
 352:	0f 5f       	subi	r16, 0xFF	; 255
 354:	1f 4f       	sbci	r17, 0xFF	; 255
 356:	1f 93       	push	r17
 358:	0f 93       	push	r16
 35a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <sprintf>
	 LCD_display_String(str);
 35e:	c8 01       	movw	r24, r16
 360:	0e 94 63 01 	call	0x2c6	; 0x2c6 <LCD_display_String>
}
 364:	0f 90       	pop	r0
 366:	0f 90       	pop	r0
 368:	0f 90       	pop	r0
 36a:	0f 90       	pop	r0
 36c:	0f 90       	pop	r0
 36e:	0f 90       	pop	r0
 370:	27 96       	adiw	r28, 0x07	; 7
 372:	0f b6       	in	r0, 0x3f	; 63
 374:	f8 94       	cli
 376:	de bf       	out	0x3e, r29	; 62
 378:	0f be       	out	0x3f, r0	; 63
 37a:	cd bf       	out	0x3d, r28	; 61
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	1f 91       	pop	r17
 382:	0f 91       	pop	r16
 384:	08 95       	ret

00000386 <main>:
#include "DIO.h"
#include "LCD.h"
#include "util/delay.h"
int main(void)
{
    LCD_init();
 386:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_init>
	LCD_display_charcter('a');
 38a:	81 e6       	ldi	r24, 0x61	; 97
 38c:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_display_charcter>
	LCD_display_String("SHADY");
 390:	83 e6       	ldi	r24, 0x63	; 99
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 63 01 	call	0x2c6	; 0x2c6 <LCD_display_String>
	LCD_display_number(10);
 398:	8a e0       	ldi	r24, 0x0A	; 10
 39a:	0e 94 96 01 	call	0x32c	; 0x32c <LCD_display_number>
	LCD_display_charcter(8+48);
 39e:	88 e3       	ldi	r24, 0x38	; 56
 3a0:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_display_charcter>
 3a4:	83 ed       	ldi	r24, 0xD3	; 211
 3a6:	90 e3       	ldi	r25, 0x30	; 48
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <main+0x22>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <main+0x28>
 3ae:	00 00       	nop
 3b0:	f9 cf       	rjmp	.-14     	; 0x3a4 <main+0x1e>

000003b2 <sprintf>:
 3b2:	ae e0       	ldi	r26, 0x0E	; 14
 3b4:	b0 e0       	ldi	r27, 0x00	; 0
 3b6:	ef ed       	ldi	r30, 0xDF	; 223
 3b8:	f1 e0       	ldi	r31, 0x01	; 1
 3ba:	0c 94 9a 04 	jmp	0x934	; 0x934 <__prologue_saves__+0x1c>
 3be:	0d 89       	ldd	r16, Y+21	; 0x15
 3c0:	1e 89       	ldd	r17, Y+22	; 0x16
 3c2:	86 e0       	ldi	r24, 0x06	; 6
 3c4:	8c 83       	std	Y+4, r24	; 0x04
 3c6:	1a 83       	std	Y+2, r17	; 0x02
 3c8:	09 83       	std	Y+1, r16	; 0x01
 3ca:	8f ef       	ldi	r24, 0xFF	; 255
 3cc:	9f e7       	ldi	r25, 0x7F	; 127
 3ce:	9e 83       	std	Y+6, r25	; 0x06
 3d0:	8d 83       	std	Y+5, r24	; 0x05
 3d2:	ae 01       	movw	r20, r28
 3d4:	47 5e       	subi	r20, 0xE7	; 231
 3d6:	5f 4f       	sbci	r21, 0xFF	; 255
 3d8:	6f 89       	ldd	r22, Y+23	; 0x17
 3da:	78 8d       	ldd	r23, Y+24	; 0x18
 3dc:	ce 01       	movw	r24, r28
 3de:	01 96       	adiw	r24, 0x01	; 1
 3e0:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <vfprintf>
 3e4:	ef 81       	ldd	r30, Y+7	; 0x07
 3e6:	f8 85       	ldd	r31, Y+8	; 0x08
 3e8:	e0 0f       	add	r30, r16
 3ea:	f1 1f       	adc	r31, r17
 3ec:	10 82       	st	Z, r1
 3ee:	2e 96       	adiw	r28, 0x0e	; 14
 3f0:	e4 e0       	ldi	r30, 0x04	; 4
 3f2:	0c 94 b6 04 	jmp	0x96c	; 0x96c <__epilogue_restores__+0x1c>

000003f6 <vfprintf>:
 3f6:	ab e0       	ldi	r26, 0x0B	; 11
 3f8:	b0 e0       	ldi	r27, 0x00	; 0
 3fa:	e1 e0       	ldi	r30, 0x01	; 1
 3fc:	f2 e0       	ldi	r31, 0x02	; 2
 3fe:	0c 94 8c 04 	jmp	0x918	; 0x918 <__prologue_saves__>
 402:	6c 01       	movw	r12, r24
 404:	7b 01       	movw	r14, r22
 406:	8a 01       	movw	r16, r20
 408:	fc 01       	movw	r30, r24
 40a:	17 82       	std	Z+7, r1	; 0x07
 40c:	16 82       	std	Z+6, r1	; 0x06
 40e:	83 81       	ldd	r24, Z+3	; 0x03
 410:	81 ff       	sbrs	r24, 1
 412:	cc c1       	rjmp	.+920    	; 0x7ac <__LOCK_REGION_LENGTH__+0x3ac>
 414:	ce 01       	movw	r24, r28
 416:	01 96       	adiw	r24, 0x01	; 1
 418:	3c 01       	movw	r6, r24
 41a:	f6 01       	movw	r30, r12
 41c:	93 81       	ldd	r25, Z+3	; 0x03
 41e:	f7 01       	movw	r30, r14
 420:	93 fd       	sbrc	r25, 3
 422:	85 91       	lpm	r24, Z+
 424:	93 ff       	sbrs	r25, 3
 426:	81 91       	ld	r24, Z+
 428:	7f 01       	movw	r14, r30
 42a:	88 23       	and	r24, r24
 42c:	09 f4       	brne	.+2      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 42e:	ba c1       	rjmp	.+884    	; 0x7a4 <__LOCK_REGION_LENGTH__+0x3a4>
 430:	85 32       	cpi	r24, 0x25	; 37
 432:	39 f4       	brne	.+14     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 434:	93 fd       	sbrc	r25, 3
 436:	85 91       	lpm	r24, Z+
 438:	93 ff       	sbrs	r25, 3
 43a:	81 91       	ld	r24, Z+
 43c:	7f 01       	movw	r14, r30
 43e:	85 32       	cpi	r24, 0x25	; 37
 440:	29 f4       	brne	.+10     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 442:	b6 01       	movw	r22, r12
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <fputc>
 44a:	e7 cf       	rjmp	.-50     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 44c:	91 2c       	mov	r9, r1
 44e:	21 2c       	mov	r2, r1
 450:	31 2c       	mov	r3, r1
 452:	ff e1       	ldi	r31, 0x1F	; 31
 454:	f3 15       	cp	r31, r3
 456:	d8 f0       	brcs	.+54     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 458:	8b 32       	cpi	r24, 0x2B	; 43
 45a:	79 f0       	breq	.+30     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 45c:	38 f4       	brcc	.+14     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 45e:	80 32       	cpi	r24, 0x20	; 32
 460:	79 f0       	breq	.+30     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 462:	83 32       	cpi	r24, 0x23	; 35
 464:	a1 f4       	brne	.+40     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 466:	23 2d       	mov	r18, r3
 468:	20 61       	ori	r18, 0x10	; 16
 46a:	1d c0       	rjmp	.+58     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 46c:	8d 32       	cpi	r24, 0x2D	; 45
 46e:	61 f0       	breq	.+24     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 470:	80 33       	cpi	r24, 0x30	; 48
 472:	69 f4       	brne	.+26     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 474:	23 2d       	mov	r18, r3
 476:	21 60       	ori	r18, 0x01	; 1
 478:	16 c0       	rjmp	.+44     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 47a:	83 2d       	mov	r24, r3
 47c:	82 60       	ori	r24, 0x02	; 2
 47e:	38 2e       	mov	r3, r24
 480:	e3 2d       	mov	r30, r3
 482:	e4 60       	ori	r30, 0x04	; 4
 484:	3e 2e       	mov	r3, r30
 486:	2a c0       	rjmp	.+84     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 488:	f3 2d       	mov	r31, r3
 48a:	f8 60       	ori	r31, 0x08	; 8
 48c:	1d c0       	rjmp	.+58     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 48e:	37 fc       	sbrc	r3, 7
 490:	2d c0       	rjmp	.+90     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
 492:	20 ed       	ldi	r18, 0xD0	; 208
 494:	28 0f       	add	r18, r24
 496:	2a 30       	cpi	r18, 0x0A	; 10
 498:	40 f0       	brcs	.+16     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 49a:	8e 32       	cpi	r24, 0x2E	; 46
 49c:	b9 f4       	brne	.+46     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 49e:	36 fc       	sbrc	r3, 6
 4a0:	81 c1       	rjmp	.+770    	; 0x7a4 <__LOCK_REGION_LENGTH__+0x3a4>
 4a2:	23 2d       	mov	r18, r3
 4a4:	20 64       	ori	r18, 0x40	; 64
 4a6:	32 2e       	mov	r3, r18
 4a8:	19 c0       	rjmp	.+50     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 4aa:	36 fe       	sbrs	r3, 6
 4ac:	06 c0       	rjmp	.+12     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4ae:	8a e0       	ldi	r24, 0x0A	; 10
 4b0:	98 9e       	mul	r9, r24
 4b2:	20 0d       	add	r18, r0
 4b4:	11 24       	eor	r1, r1
 4b6:	92 2e       	mov	r9, r18
 4b8:	11 c0       	rjmp	.+34     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 4ba:	ea e0       	ldi	r30, 0x0A	; 10
 4bc:	2e 9e       	mul	r2, r30
 4be:	20 0d       	add	r18, r0
 4c0:	11 24       	eor	r1, r1
 4c2:	22 2e       	mov	r2, r18
 4c4:	f3 2d       	mov	r31, r3
 4c6:	f0 62       	ori	r31, 0x20	; 32
 4c8:	3f 2e       	mov	r3, r31
 4ca:	08 c0       	rjmp	.+16     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 4cc:	8c 36       	cpi	r24, 0x6C	; 108
 4ce:	21 f4       	brne	.+8      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 4d0:	83 2d       	mov	r24, r3
 4d2:	80 68       	ori	r24, 0x80	; 128
 4d4:	38 2e       	mov	r3, r24
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 4d8:	88 36       	cpi	r24, 0x68	; 104
 4da:	41 f4       	brne	.+16     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
 4dc:	f7 01       	movw	r30, r14
 4de:	93 fd       	sbrc	r25, 3
 4e0:	85 91       	lpm	r24, Z+
 4e2:	93 ff       	sbrs	r25, 3
 4e4:	81 91       	ld	r24, Z+
 4e6:	7f 01       	movw	r14, r30
 4e8:	81 11       	cpse	r24, r1
 4ea:	b3 cf       	rjmp	.-154    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 4ec:	98 2f       	mov	r25, r24
 4ee:	9f 7d       	andi	r25, 0xDF	; 223
 4f0:	95 54       	subi	r25, 0x45	; 69
 4f2:	93 30       	cpi	r25, 0x03	; 3
 4f4:	28 f4       	brcc	.+10     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 4f6:	0c 5f       	subi	r16, 0xFC	; 252
 4f8:	1f 4f       	sbci	r17, 0xFF	; 255
 4fa:	9f e3       	ldi	r25, 0x3F	; 63
 4fc:	99 83       	std	Y+1, r25	; 0x01
 4fe:	0d c0       	rjmp	.+26     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 500:	83 36       	cpi	r24, 0x63	; 99
 502:	31 f0       	breq	.+12     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
 504:	83 37       	cpi	r24, 0x73	; 115
 506:	71 f0       	breq	.+28     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
 508:	83 35       	cpi	r24, 0x53	; 83
 50a:	09 f0       	breq	.+2      	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 50c:	59 c0       	rjmp	.+178    	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
 50e:	21 c0       	rjmp	.+66     	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
 510:	f8 01       	movw	r30, r16
 512:	80 81       	ld	r24, Z
 514:	89 83       	std	Y+1, r24	; 0x01
 516:	0e 5f       	subi	r16, 0xFE	; 254
 518:	1f 4f       	sbci	r17, 0xFF	; 255
 51a:	88 24       	eor	r8, r8
 51c:	83 94       	inc	r8
 51e:	91 2c       	mov	r9, r1
 520:	53 01       	movw	r10, r6
 522:	13 c0       	rjmp	.+38     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 524:	28 01       	movw	r4, r16
 526:	f2 e0       	ldi	r31, 0x02	; 2
 528:	4f 0e       	add	r4, r31
 52a:	51 1c       	adc	r5, r1
 52c:	f8 01       	movw	r30, r16
 52e:	a0 80       	ld	r10, Z
 530:	b1 80       	ldd	r11, Z+1	; 0x01
 532:	36 fe       	sbrs	r3, 6
 534:	03 c0       	rjmp	.+6      	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
 536:	69 2d       	mov	r22, r9
 538:	70 e0       	ldi	r23, 0x00	; 0
 53a:	02 c0       	rjmp	.+4      	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
 53c:	6f ef       	ldi	r22, 0xFF	; 255
 53e:	7f ef       	ldi	r23, 0xFF	; 255
 540:	c5 01       	movw	r24, r10
 542:	0e 94 e7 03 	call	0x7ce	; 0x7ce <strnlen>
 546:	4c 01       	movw	r8, r24
 548:	82 01       	movw	r16, r4
 54a:	f3 2d       	mov	r31, r3
 54c:	ff 77       	andi	r31, 0x7F	; 127
 54e:	3f 2e       	mov	r3, r31
 550:	16 c0       	rjmp	.+44     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
 552:	28 01       	movw	r4, r16
 554:	22 e0       	ldi	r18, 0x02	; 2
 556:	42 0e       	add	r4, r18
 558:	51 1c       	adc	r5, r1
 55a:	f8 01       	movw	r30, r16
 55c:	a0 80       	ld	r10, Z
 55e:	b1 80       	ldd	r11, Z+1	; 0x01
 560:	36 fe       	sbrs	r3, 6
 562:	03 c0       	rjmp	.+6      	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
 564:	69 2d       	mov	r22, r9
 566:	70 e0       	ldi	r23, 0x00	; 0
 568:	02 c0       	rjmp	.+4      	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 56a:	6f ef       	ldi	r22, 0xFF	; 255
 56c:	7f ef       	ldi	r23, 0xFF	; 255
 56e:	c5 01       	movw	r24, r10
 570:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <strnlen_P>
 574:	4c 01       	movw	r8, r24
 576:	f3 2d       	mov	r31, r3
 578:	f0 68       	ori	r31, 0x80	; 128
 57a:	3f 2e       	mov	r3, r31
 57c:	82 01       	movw	r16, r4
 57e:	33 fc       	sbrc	r3, 3
 580:	1b c0       	rjmp	.+54     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
 582:	82 2d       	mov	r24, r2
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	88 16       	cp	r8, r24
 588:	99 06       	cpc	r9, r25
 58a:	b0 f4       	brcc	.+44     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
 58c:	b6 01       	movw	r22, r12
 58e:	80 e2       	ldi	r24, 0x20	; 32
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <fputc>
 596:	2a 94       	dec	r2
 598:	f4 cf       	rjmp	.-24     	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
 59a:	f5 01       	movw	r30, r10
 59c:	37 fc       	sbrc	r3, 7
 59e:	85 91       	lpm	r24, Z+
 5a0:	37 fe       	sbrs	r3, 7
 5a2:	81 91       	ld	r24, Z+
 5a4:	5f 01       	movw	r10, r30
 5a6:	b6 01       	movw	r22, r12
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <fputc>
 5ae:	21 10       	cpse	r2, r1
 5b0:	2a 94       	dec	r2
 5b2:	21 e0       	ldi	r18, 0x01	; 1
 5b4:	82 1a       	sub	r8, r18
 5b6:	91 08       	sbc	r9, r1
 5b8:	81 14       	cp	r8, r1
 5ba:	91 04       	cpc	r9, r1
 5bc:	71 f7       	brne	.-36     	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
 5be:	e8 c0       	rjmp	.+464    	; 0x790 <__LOCK_REGION_LENGTH__+0x390>
 5c0:	84 36       	cpi	r24, 0x64	; 100
 5c2:	11 f0       	breq	.+4      	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
 5c4:	89 36       	cpi	r24, 0x69	; 105
 5c6:	41 f5       	brne	.+80     	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
 5c8:	f8 01       	movw	r30, r16
 5ca:	37 fe       	sbrs	r3, 7
 5cc:	07 c0       	rjmp	.+14     	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
 5ce:	60 81       	ld	r22, Z
 5d0:	71 81       	ldd	r23, Z+1	; 0x01
 5d2:	82 81       	ldd	r24, Z+2	; 0x02
 5d4:	93 81       	ldd	r25, Z+3	; 0x03
 5d6:	0c 5f       	subi	r16, 0xFC	; 252
 5d8:	1f 4f       	sbci	r17, 0xFF	; 255
 5da:	08 c0       	rjmp	.+16     	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
 5dc:	60 81       	ld	r22, Z
 5de:	71 81       	ldd	r23, Z+1	; 0x01
 5e0:	07 2e       	mov	r0, r23
 5e2:	00 0c       	add	r0, r0
 5e4:	88 0b       	sbc	r24, r24
 5e6:	99 0b       	sbc	r25, r25
 5e8:	0e 5f       	subi	r16, 0xFE	; 254
 5ea:	1f 4f       	sbci	r17, 0xFF	; 255
 5ec:	f3 2d       	mov	r31, r3
 5ee:	ff 76       	andi	r31, 0x6F	; 111
 5f0:	3f 2e       	mov	r3, r31
 5f2:	97 ff       	sbrs	r25, 7
 5f4:	09 c0       	rjmp	.+18     	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
 5f6:	90 95       	com	r25
 5f8:	80 95       	com	r24
 5fa:	70 95       	com	r23
 5fc:	61 95       	neg	r22
 5fe:	7f 4f       	sbci	r23, 0xFF	; 255
 600:	8f 4f       	sbci	r24, 0xFF	; 255
 602:	9f 4f       	sbci	r25, 0xFF	; 255
 604:	f0 68       	ori	r31, 0x80	; 128
 606:	3f 2e       	mov	r3, r31
 608:	2a e0       	ldi	r18, 0x0A	; 10
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	a3 01       	movw	r20, r6
 60e:	0e 94 2e 04 	call	0x85c	; 0x85c <__ultoa_invert>
 612:	88 2e       	mov	r8, r24
 614:	86 18       	sub	r8, r6
 616:	45 c0       	rjmp	.+138    	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
 618:	85 37       	cpi	r24, 0x75	; 117
 61a:	31 f4       	brne	.+12     	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
 61c:	23 2d       	mov	r18, r3
 61e:	2f 7e       	andi	r18, 0xEF	; 239
 620:	b2 2e       	mov	r11, r18
 622:	2a e0       	ldi	r18, 0x0A	; 10
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	25 c0       	rjmp	.+74     	; 0x672 <__LOCK_REGION_LENGTH__+0x272>
 628:	93 2d       	mov	r25, r3
 62a:	99 7f       	andi	r25, 0xF9	; 249
 62c:	b9 2e       	mov	r11, r25
 62e:	8f 36       	cpi	r24, 0x6F	; 111
 630:	c1 f0       	breq	.+48     	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
 632:	18 f4       	brcc	.+6      	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
 634:	88 35       	cpi	r24, 0x58	; 88
 636:	79 f0       	breq	.+30     	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
 638:	b5 c0       	rjmp	.+362    	; 0x7a4 <__LOCK_REGION_LENGTH__+0x3a4>
 63a:	80 37       	cpi	r24, 0x70	; 112
 63c:	19 f0       	breq	.+6      	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
 63e:	88 37       	cpi	r24, 0x78	; 120
 640:	21 f0       	breq	.+8      	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
 642:	b0 c0       	rjmp	.+352    	; 0x7a4 <__LOCK_REGION_LENGTH__+0x3a4>
 644:	e9 2f       	mov	r30, r25
 646:	e0 61       	ori	r30, 0x10	; 16
 648:	be 2e       	mov	r11, r30
 64a:	b4 fe       	sbrs	r11, 4
 64c:	0d c0       	rjmp	.+26     	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
 64e:	fb 2d       	mov	r31, r11
 650:	f4 60       	ori	r31, 0x04	; 4
 652:	bf 2e       	mov	r11, r31
 654:	09 c0       	rjmp	.+18     	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
 656:	34 fe       	sbrs	r3, 4
 658:	0a c0       	rjmp	.+20     	; 0x66e <__LOCK_REGION_LENGTH__+0x26e>
 65a:	29 2f       	mov	r18, r25
 65c:	26 60       	ori	r18, 0x06	; 6
 65e:	b2 2e       	mov	r11, r18
 660:	06 c0       	rjmp	.+12     	; 0x66e <__LOCK_REGION_LENGTH__+0x26e>
 662:	28 e0       	ldi	r18, 0x08	; 8
 664:	30 e0       	ldi	r19, 0x00	; 0
 666:	05 c0       	rjmp	.+10     	; 0x672 <__LOCK_REGION_LENGTH__+0x272>
 668:	20 e1       	ldi	r18, 0x10	; 16
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	02 c0       	rjmp	.+4      	; 0x672 <__LOCK_REGION_LENGTH__+0x272>
 66e:	20 e1       	ldi	r18, 0x10	; 16
 670:	32 e0       	ldi	r19, 0x02	; 2
 672:	f8 01       	movw	r30, r16
 674:	b7 fe       	sbrs	r11, 7
 676:	07 c0       	rjmp	.+14     	; 0x686 <__LOCK_REGION_LENGTH__+0x286>
 678:	60 81       	ld	r22, Z
 67a:	71 81       	ldd	r23, Z+1	; 0x01
 67c:	82 81       	ldd	r24, Z+2	; 0x02
 67e:	93 81       	ldd	r25, Z+3	; 0x03
 680:	0c 5f       	subi	r16, 0xFC	; 252
 682:	1f 4f       	sbci	r17, 0xFF	; 255
 684:	06 c0       	rjmp	.+12     	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
 686:	60 81       	ld	r22, Z
 688:	71 81       	ldd	r23, Z+1	; 0x01
 68a:	80 e0       	ldi	r24, 0x00	; 0
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	0e 5f       	subi	r16, 0xFE	; 254
 690:	1f 4f       	sbci	r17, 0xFF	; 255
 692:	a3 01       	movw	r20, r6
 694:	0e 94 2e 04 	call	0x85c	; 0x85c <__ultoa_invert>
 698:	88 2e       	mov	r8, r24
 69a:	86 18       	sub	r8, r6
 69c:	fb 2d       	mov	r31, r11
 69e:	ff 77       	andi	r31, 0x7F	; 127
 6a0:	3f 2e       	mov	r3, r31
 6a2:	36 fe       	sbrs	r3, 6
 6a4:	0d c0       	rjmp	.+26     	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
 6a6:	23 2d       	mov	r18, r3
 6a8:	2e 7f       	andi	r18, 0xFE	; 254
 6aa:	a2 2e       	mov	r10, r18
 6ac:	89 14       	cp	r8, r9
 6ae:	58 f4       	brcc	.+22     	; 0x6c6 <__LOCK_REGION_LENGTH__+0x2c6>
 6b0:	34 fe       	sbrs	r3, 4
 6b2:	0b c0       	rjmp	.+22     	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
 6b4:	32 fc       	sbrc	r3, 2
 6b6:	09 c0       	rjmp	.+18     	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
 6b8:	83 2d       	mov	r24, r3
 6ba:	8e 7e       	andi	r24, 0xEE	; 238
 6bc:	a8 2e       	mov	r10, r24
 6be:	05 c0       	rjmp	.+10     	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
 6c0:	b8 2c       	mov	r11, r8
 6c2:	a3 2c       	mov	r10, r3
 6c4:	03 c0       	rjmp	.+6      	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>
 6c6:	b8 2c       	mov	r11, r8
 6c8:	01 c0       	rjmp	.+2      	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>
 6ca:	b9 2c       	mov	r11, r9
 6cc:	a4 fe       	sbrs	r10, 4
 6ce:	0f c0       	rjmp	.+30     	; 0x6ee <__LOCK_REGION_LENGTH__+0x2ee>
 6d0:	fe 01       	movw	r30, r28
 6d2:	e8 0d       	add	r30, r8
 6d4:	f1 1d       	adc	r31, r1
 6d6:	80 81       	ld	r24, Z
 6d8:	80 33       	cpi	r24, 0x30	; 48
 6da:	21 f4       	brne	.+8      	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
 6dc:	9a 2d       	mov	r25, r10
 6de:	99 7e       	andi	r25, 0xE9	; 233
 6e0:	a9 2e       	mov	r10, r25
 6e2:	09 c0       	rjmp	.+18     	; 0x6f6 <__LOCK_REGION_LENGTH__+0x2f6>
 6e4:	a2 fe       	sbrs	r10, 2
 6e6:	06 c0       	rjmp	.+12     	; 0x6f4 <__LOCK_REGION_LENGTH__+0x2f4>
 6e8:	b3 94       	inc	r11
 6ea:	b3 94       	inc	r11
 6ec:	04 c0       	rjmp	.+8      	; 0x6f6 <__LOCK_REGION_LENGTH__+0x2f6>
 6ee:	8a 2d       	mov	r24, r10
 6f0:	86 78       	andi	r24, 0x86	; 134
 6f2:	09 f0       	breq	.+2      	; 0x6f6 <__LOCK_REGION_LENGTH__+0x2f6>
 6f4:	b3 94       	inc	r11
 6f6:	a3 fc       	sbrc	r10, 3
 6f8:	11 c0       	rjmp	.+34     	; 0x71c <__LOCK_REGION_LENGTH__+0x31c>
 6fa:	a0 fe       	sbrs	r10, 0
 6fc:	06 c0       	rjmp	.+12     	; 0x70a <__LOCK_REGION_LENGTH__+0x30a>
 6fe:	b2 14       	cp	r11, r2
 700:	88 f4       	brcc	.+34     	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
 702:	28 0c       	add	r2, r8
 704:	92 2c       	mov	r9, r2
 706:	9b 18       	sub	r9, r11
 708:	0e c0       	rjmp	.+28     	; 0x726 <__LOCK_REGION_LENGTH__+0x326>
 70a:	b2 14       	cp	r11, r2
 70c:	60 f4       	brcc	.+24     	; 0x726 <__LOCK_REGION_LENGTH__+0x326>
 70e:	b6 01       	movw	r22, r12
 710:	80 e2       	ldi	r24, 0x20	; 32
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <fputc>
 718:	b3 94       	inc	r11
 71a:	f7 cf       	rjmp	.-18     	; 0x70a <__LOCK_REGION_LENGTH__+0x30a>
 71c:	b2 14       	cp	r11, r2
 71e:	18 f4       	brcc	.+6      	; 0x726 <__LOCK_REGION_LENGTH__+0x326>
 720:	2b 18       	sub	r2, r11
 722:	02 c0       	rjmp	.+4      	; 0x728 <__LOCK_REGION_LENGTH__+0x328>
 724:	98 2c       	mov	r9, r8
 726:	21 2c       	mov	r2, r1
 728:	a4 fe       	sbrs	r10, 4
 72a:	10 c0       	rjmp	.+32     	; 0x74c <__LOCK_REGION_LENGTH__+0x34c>
 72c:	b6 01       	movw	r22, r12
 72e:	80 e3       	ldi	r24, 0x30	; 48
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <fputc>
 736:	a2 fe       	sbrs	r10, 2
 738:	17 c0       	rjmp	.+46     	; 0x768 <__LOCK_REGION_LENGTH__+0x368>
 73a:	a1 fc       	sbrc	r10, 1
 73c:	03 c0       	rjmp	.+6      	; 0x744 <__LOCK_REGION_LENGTH__+0x344>
 73e:	88 e7       	ldi	r24, 0x78	; 120
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	02 c0       	rjmp	.+4      	; 0x748 <__LOCK_REGION_LENGTH__+0x348>
 744:	88 e5       	ldi	r24, 0x58	; 88
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	b6 01       	movw	r22, r12
 74a:	0c c0       	rjmp	.+24     	; 0x764 <__LOCK_REGION_LENGTH__+0x364>
 74c:	8a 2d       	mov	r24, r10
 74e:	86 78       	andi	r24, 0x86	; 134
 750:	59 f0       	breq	.+22     	; 0x768 <__LOCK_REGION_LENGTH__+0x368>
 752:	a1 fe       	sbrs	r10, 1
 754:	02 c0       	rjmp	.+4      	; 0x75a <__LOCK_REGION_LENGTH__+0x35a>
 756:	8b e2       	ldi	r24, 0x2B	; 43
 758:	01 c0       	rjmp	.+2      	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
 75a:	80 e2       	ldi	r24, 0x20	; 32
 75c:	a7 fc       	sbrc	r10, 7
 75e:	8d e2       	ldi	r24, 0x2D	; 45
 760:	b6 01       	movw	r22, r12
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <fputc>
 768:	89 14       	cp	r8, r9
 76a:	38 f4       	brcc	.+14     	; 0x77a <__LOCK_REGION_LENGTH__+0x37a>
 76c:	b6 01       	movw	r22, r12
 76e:	80 e3       	ldi	r24, 0x30	; 48
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <fputc>
 776:	9a 94       	dec	r9
 778:	f7 cf       	rjmp	.-18     	; 0x768 <__LOCK_REGION_LENGTH__+0x368>
 77a:	8a 94       	dec	r8
 77c:	f3 01       	movw	r30, r6
 77e:	e8 0d       	add	r30, r8
 780:	f1 1d       	adc	r31, r1
 782:	80 81       	ld	r24, Z
 784:	b6 01       	movw	r22, r12
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <fputc>
 78c:	81 10       	cpse	r8, r1
 78e:	f5 cf       	rjmp	.-22     	; 0x77a <__LOCK_REGION_LENGTH__+0x37a>
 790:	22 20       	and	r2, r2
 792:	09 f4       	brne	.+2      	; 0x796 <__LOCK_REGION_LENGTH__+0x396>
 794:	42 ce       	rjmp	.-892    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 796:	b6 01       	movw	r22, r12
 798:	80 e2       	ldi	r24, 0x20	; 32
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <fputc>
 7a0:	2a 94       	dec	r2
 7a2:	f6 cf       	rjmp	.-20     	; 0x790 <__LOCK_REGION_LENGTH__+0x390>
 7a4:	f6 01       	movw	r30, r12
 7a6:	86 81       	ldd	r24, Z+6	; 0x06
 7a8:	97 81       	ldd	r25, Z+7	; 0x07
 7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <__LOCK_REGION_LENGTH__+0x3b0>
 7ac:	8f ef       	ldi	r24, 0xFF	; 255
 7ae:	9f ef       	ldi	r25, 0xFF	; 255
 7b0:	2b 96       	adiw	r28, 0x0b	; 11
 7b2:	e2 e1       	ldi	r30, 0x12	; 18
 7b4:	0c 94 a8 04 	jmp	0x950	; 0x950 <__epilogue_restores__>

000007b8 <strnlen_P>:
 7b8:	fc 01       	movw	r30, r24
 7ba:	05 90       	lpm	r0, Z+
 7bc:	61 50       	subi	r22, 0x01	; 1
 7be:	70 40       	sbci	r23, 0x00	; 0
 7c0:	01 10       	cpse	r0, r1
 7c2:	d8 f7       	brcc	.-10     	; 0x7ba <strnlen_P+0x2>
 7c4:	80 95       	com	r24
 7c6:	90 95       	com	r25
 7c8:	8e 0f       	add	r24, r30
 7ca:	9f 1f       	adc	r25, r31
 7cc:	08 95       	ret

000007ce <strnlen>:
 7ce:	fc 01       	movw	r30, r24
 7d0:	61 50       	subi	r22, 0x01	; 1
 7d2:	70 40       	sbci	r23, 0x00	; 0
 7d4:	01 90       	ld	r0, Z+
 7d6:	01 10       	cpse	r0, r1
 7d8:	d8 f7       	brcc	.-10     	; 0x7d0 <strnlen+0x2>
 7da:	80 95       	com	r24
 7dc:	90 95       	com	r25
 7de:	8e 0f       	add	r24, r30
 7e0:	9f 1f       	adc	r25, r31
 7e2:	08 95       	ret

000007e4 <fputc>:
 7e4:	0f 93       	push	r16
 7e6:	1f 93       	push	r17
 7e8:	cf 93       	push	r28
 7ea:	df 93       	push	r29
 7ec:	fb 01       	movw	r30, r22
 7ee:	23 81       	ldd	r18, Z+3	; 0x03
 7f0:	21 fd       	sbrc	r18, 1
 7f2:	03 c0       	rjmp	.+6      	; 0x7fa <fputc+0x16>
 7f4:	8f ef       	ldi	r24, 0xFF	; 255
 7f6:	9f ef       	ldi	r25, 0xFF	; 255
 7f8:	2c c0       	rjmp	.+88     	; 0x852 <fputc+0x6e>
 7fa:	22 ff       	sbrs	r18, 2
 7fc:	16 c0       	rjmp	.+44     	; 0x82a <fputc+0x46>
 7fe:	46 81       	ldd	r20, Z+6	; 0x06
 800:	57 81       	ldd	r21, Z+7	; 0x07
 802:	24 81       	ldd	r18, Z+4	; 0x04
 804:	35 81       	ldd	r19, Z+5	; 0x05
 806:	42 17       	cp	r20, r18
 808:	53 07       	cpc	r21, r19
 80a:	44 f4       	brge	.+16     	; 0x81c <fputc+0x38>
 80c:	a0 81       	ld	r26, Z
 80e:	b1 81       	ldd	r27, Z+1	; 0x01
 810:	9d 01       	movw	r18, r26
 812:	2f 5f       	subi	r18, 0xFF	; 255
 814:	3f 4f       	sbci	r19, 0xFF	; 255
 816:	31 83       	std	Z+1, r19	; 0x01
 818:	20 83       	st	Z, r18
 81a:	8c 93       	st	X, r24
 81c:	26 81       	ldd	r18, Z+6	; 0x06
 81e:	37 81       	ldd	r19, Z+7	; 0x07
 820:	2f 5f       	subi	r18, 0xFF	; 255
 822:	3f 4f       	sbci	r19, 0xFF	; 255
 824:	37 83       	std	Z+7, r19	; 0x07
 826:	26 83       	std	Z+6, r18	; 0x06
 828:	14 c0       	rjmp	.+40     	; 0x852 <fputc+0x6e>
 82a:	8b 01       	movw	r16, r22
 82c:	ec 01       	movw	r28, r24
 82e:	fb 01       	movw	r30, r22
 830:	00 84       	ldd	r0, Z+8	; 0x08
 832:	f1 85       	ldd	r31, Z+9	; 0x09
 834:	e0 2d       	mov	r30, r0
 836:	09 95       	icall
 838:	89 2b       	or	r24, r25
 83a:	e1 f6       	brne	.-72     	; 0x7f4 <fputc+0x10>
 83c:	d8 01       	movw	r26, r16
 83e:	16 96       	adiw	r26, 0x06	; 6
 840:	8d 91       	ld	r24, X+
 842:	9c 91       	ld	r25, X
 844:	17 97       	sbiw	r26, 0x07	; 7
 846:	01 96       	adiw	r24, 0x01	; 1
 848:	17 96       	adiw	r26, 0x07	; 7
 84a:	9c 93       	st	X, r25
 84c:	8e 93       	st	-X, r24
 84e:	16 97       	sbiw	r26, 0x06	; 6
 850:	ce 01       	movw	r24, r28
 852:	df 91       	pop	r29
 854:	cf 91       	pop	r28
 856:	1f 91       	pop	r17
 858:	0f 91       	pop	r16
 85a:	08 95       	ret

0000085c <__ultoa_invert>:
 85c:	fa 01       	movw	r30, r20
 85e:	aa 27       	eor	r26, r26
 860:	28 30       	cpi	r18, 0x08	; 8
 862:	51 f1       	breq	.+84     	; 0x8b8 <__stack+0x59>
 864:	20 31       	cpi	r18, 0x10	; 16
 866:	81 f1       	breq	.+96     	; 0x8c8 <__stack+0x69>
 868:	e8 94       	clt
 86a:	6f 93       	push	r22
 86c:	6e 7f       	andi	r22, 0xFE	; 254
 86e:	6e 5f       	subi	r22, 0xFE	; 254
 870:	7f 4f       	sbci	r23, 0xFF	; 255
 872:	8f 4f       	sbci	r24, 0xFF	; 255
 874:	9f 4f       	sbci	r25, 0xFF	; 255
 876:	af 4f       	sbci	r26, 0xFF	; 255
 878:	b1 e0       	ldi	r27, 0x01	; 1
 87a:	3e d0       	rcall	.+124    	; 0x8f8 <__stack+0x99>
 87c:	b4 e0       	ldi	r27, 0x04	; 4
 87e:	3c d0       	rcall	.+120    	; 0x8f8 <__stack+0x99>
 880:	67 0f       	add	r22, r23
 882:	78 1f       	adc	r23, r24
 884:	89 1f       	adc	r24, r25
 886:	9a 1f       	adc	r25, r26
 888:	a1 1d       	adc	r26, r1
 88a:	68 0f       	add	r22, r24
 88c:	79 1f       	adc	r23, r25
 88e:	8a 1f       	adc	r24, r26
 890:	91 1d       	adc	r25, r1
 892:	a1 1d       	adc	r26, r1
 894:	6a 0f       	add	r22, r26
 896:	71 1d       	adc	r23, r1
 898:	81 1d       	adc	r24, r1
 89a:	91 1d       	adc	r25, r1
 89c:	a1 1d       	adc	r26, r1
 89e:	20 d0       	rcall	.+64     	; 0x8e0 <__stack+0x81>
 8a0:	09 f4       	brne	.+2      	; 0x8a4 <__stack+0x45>
 8a2:	68 94       	set
 8a4:	3f 91       	pop	r19
 8a6:	2a e0       	ldi	r18, 0x0A	; 10
 8a8:	26 9f       	mul	r18, r22
 8aa:	11 24       	eor	r1, r1
 8ac:	30 19       	sub	r19, r0
 8ae:	30 5d       	subi	r19, 0xD0	; 208
 8b0:	31 93       	st	Z+, r19
 8b2:	de f6       	brtc	.-74     	; 0x86a <__stack+0xb>
 8b4:	cf 01       	movw	r24, r30
 8b6:	08 95       	ret
 8b8:	46 2f       	mov	r20, r22
 8ba:	47 70       	andi	r20, 0x07	; 7
 8bc:	40 5d       	subi	r20, 0xD0	; 208
 8be:	41 93       	st	Z+, r20
 8c0:	b3 e0       	ldi	r27, 0x03	; 3
 8c2:	0f d0       	rcall	.+30     	; 0x8e2 <__stack+0x83>
 8c4:	c9 f7       	brne	.-14     	; 0x8b8 <__stack+0x59>
 8c6:	f6 cf       	rjmp	.-20     	; 0x8b4 <__stack+0x55>
 8c8:	46 2f       	mov	r20, r22
 8ca:	4f 70       	andi	r20, 0x0F	; 15
 8cc:	40 5d       	subi	r20, 0xD0	; 208
 8ce:	4a 33       	cpi	r20, 0x3A	; 58
 8d0:	18 f0       	brcs	.+6      	; 0x8d8 <__stack+0x79>
 8d2:	49 5d       	subi	r20, 0xD9	; 217
 8d4:	31 fd       	sbrc	r19, 1
 8d6:	40 52       	subi	r20, 0x20	; 32
 8d8:	41 93       	st	Z+, r20
 8da:	02 d0       	rcall	.+4      	; 0x8e0 <__stack+0x81>
 8dc:	a9 f7       	brne	.-22     	; 0x8c8 <__stack+0x69>
 8de:	ea cf       	rjmp	.-44     	; 0x8b4 <__stack+0x55>
 8e0:	b4 e0       	ldi	r27, 0x04	; 4
 8e2:	a6 95       	lsr	r26
 8e4:	97 95       	ror	r25
 8e6:	87 95       	ror	r24
 8e8:	77 95       	ror	r23
 8ea:	67 95       	ror	r22
 8ec:	ba 95       	dec	r27
 8ee:	c9 f7       	brne	.-14     	; 0x8e2 <__stack+0x83>
 8f0:	00 97       	sbiw	r24, 0x00	; 0
 8f2:	61 05       	cpc	r22, r1
 8f4:	71 05       	cpc	r23, r1
 8f6:	08 95       	ret
 8f8:	9b 01       	movw	r18, r22
 8fa:	ac 01       	movw	r20, r24
 8fc:	0a 2e       	mov	r0, r26
 8fe:	06 94       	lsr	r0
 900:	57 95       	ror	r21
 902:	47 95       	ror	r20
 904:	37 95       	ror	r19
 906:	27 95       	ror	r18
 908:	ba 95       	dec	r27
 90a:	c9 f7       	brne	.-14     	; 0x8fe <__stack+0x9f>
 90c:	62 0f       	add	r22, r18
 90e:	73 1f       	adc	r23, r19
 910:	84 1f       	adc	r24, r20
 912:	95 1f       	adc	r25, r21
 914:	a0 1d       	adc	r26, r0
 916:	08 95       	ret

00000918 <__prologue_saves__>:
 918:	2f 92       	push	r2
 91a:	3f 92       	push	r3
 91c:	4f 92       	push	r4
 91e:	5f 92       	push	r5
 920:	6f 92       	push	r6
 922:	7f 92       	push	r7
 924:	8f 92       	push	r8
 926:	9f 92       	push	r9
 928:	af 92       	push	r10
 92a:	bf 92       	push	r11
 92c:	cf 92       	push	r12
 92e:	df 92       	push	r13
 930:	ef 92       	push	r14
 932:	ff 92       	push	r15
 934:	0f 93       	push	r16
 936:	1f 93       	push	r17
 938:	cf 93       	push	r28
 93a:	df 93       	push	r29
 93c:	cd b7       	in	r28, 0x3d	; 61
 93e:	de b7       	in	r29, 0x3e	; 62
 940:	ca 1b       	sub	r28, r26
 942:	db 0b       	sbc	r29, r27
 944:	0f b6       	in	r0, 0x3f	; 63
 946:	f8 94       	cli
 948:	de bf       	out	0x3e, r29	; 62
 94a:	0f be       	out	0x3f, r0	; 63
 94c:	cd bf       	out	0x3d, r28	; 61
 94e:	09 94       	ijmp

00000950 <__epilogue_restores__>:
 950:	2a 88       	ldd	r2, Y+18	; 0x12
 952:	39 88       	ldd	r3, Y+17	; 0x11
 954:	48 88       	ldd	r4, Y+16	; 0x10
 956:	5f 84       	ldd	r5, Y+15	; 0x0f
 958:	6e 84       	ldd	r6, Y+14	; 0x0e
 95a:	7d 84       	ldd	r7, Y+13	; 0x0d
 95c:	8c 84       	ldd	r8, Y+12	; 0x0c
 95e:	9b 84       	ldd	r9, Y+11	; 0x0b
 960:	aa 84       	ldd	r10, Y+10	; 0x0a
 962:	b9 84       	ldd	r11, Y+9	; 0x09
 964:	c8 84       	ldd	r12, Y+8	; 0x08
 966:	df 80       	ldd	r13, Y+7	; 0x07
 968:	ee 80       	ldd	r14, Y+6	; 0x06
 96a:	fd 80       	ldd	r15, Y+5	; 0x05
 96c:	0c 81       	ldd	r16, Y+4	; 0x04
 96e:	1b 81       	ldd	r17, Y+3	; 0x03
 970:	aa 81       	ldd	r26, Y+2	; 0x02
 972:	b9 81       	ldd	r27, Y+1	; 0x01
 974:	ce 0f       	add	r28, r30
 976:	d1 1d       	adc	r29, r1
 978:	0f b6       	in	r0, 0x3f	; 63
 97a:	f8 94       	cli
 97c:	de bf       	out	0x3e, r29	; 62
 97e:	0f be       	out	0x3f, r0	; 63
 980:	cd bf       	out	0x3d, r28	; 61
 982:	ed 01       	movw	r28, r26
 984:	08 95       	ret

00000986 <_exit>:
 986:	f8 94       	cli

00000988 <__stop_program>:
 988:	ff cf       	rjmp	.-2      	; 0x988 <__stop_program>
