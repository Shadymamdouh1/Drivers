
keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000790  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00000790  00000824  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800088  00800088  0000084c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000087c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013a8  00000000  00000000  000009a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095e  00000000  00000000  00001d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009d5  00000000  00000000  000026ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ec  00000000  00000000  00003084  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004df  00000000  00000000  00003270  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008e5  00000000  00000000  0000374f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e9       	ldi	r30, 0x90	; 144
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e8       	ldi	r26, 0x88	; 136
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 38       	cpi	r26, 0x8D	; 141
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 53 03 	call	0x6a6	; 0x6a6 <main>
  8a:	0c 94 c6 03 	jmp	0x78c	; 0x78c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SetPinDirection>:
#include "DIO.h"
#include "registers.h"
#include "macros.h"
extern void DIO_SetPinDirection(u8 port,u8 pin,u8 Dir)
{
	switch(port)
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	11 f1       	breq	.+68     	; 0xda <DIO_SetPinDirection+0x48>
  96:	30 f0       	brcs	.+12     	; 0xa4 <DIO_SetPinDirection+0x12>
  98:	82 30       	cpi	r24, 0x02	; 2
  9a:	d1 f1       	breq	.+116    	; 0x110 <DIO_SetPinDirection+0x7e>
  9c:	83 30       	cpi	r24, 0x03	; 3
  9e:	09 f4       	brne	.+2      	; 0xa2 <DIO_SetPinDirection+0x10>
  a0:	52 c0       	rjmp	.+164    	; 0x146 <DIO_SetPinDirection+0xb4>
  a2:	08 95       	ret
	{
		case a :
		if (Dir==OUTPUT)
  a4:	41 30       	cpi	r20, 0x01	; 1
  a6:	59 f4       	brne	.+22     	; 0xbe <DIO_SetPinDirection+0x2c>
		{
			set_bit(DDRA,pin);	
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <DIO_SetPinDirection+0x20>
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	6a 95       	dec	r22
  b4:	e2 f7       	brpl	.-8      	; 0xae <DIO_SetPinDirection+0x1c>
  b6:	9a b3       	in	r25, 0x1a	; 26
  b8:	89 2b       	or	r24, r25
  ba:	8a bb       	out	0x1a, r24	; 26
  bc:	08 95       	ret
		}
		if (Dir==INPUT)
  be:	41 11       	cpse	r20, r1
  c0:	5c c0       	rjmp	.+184    	; 0x17a <DIO_SetPinDirection+0xe8>
		{
			clr_bit(DDRA,pin);
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <DIO_SetPinDirection+0x3a>
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <DIO_SetPinDirection+0x36>
  d0:	80 95       	com	r24
  d2:	9a b3       	in	r25, 0x1a	; 26
  d4:	89 23       	and	r24, r25
  d6:	8a bb       	out	0x1a, r24	; 26
  d8:	08 95       	ret
		}
		break;
		case b :
		if (Dir==OUTPUT)
  da:	41 30       	cpi	r20, 0x01	; 1
  dc:	59 f4       	brne	.+22     	; 0xf4 <DIO_SetPinDirection+0x62>
		{
			set_bit(DDRB,pin);
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_SetPinDirection+0x56>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_SetPinDirection+0x52>
  ec:	97 b3       	in	r25, 0x17	; 23
  ee:	89 2b       	or	r24, r25
  f0:	87 bb       	out	0x17, r24	; 23
  f2:	08 95       	ret
		}
		if (Dir==INPUT)
  f4:	41 11       	cpse	r20, r1
  f6:	41 c0       	rjmp	.+130    	; 0x17a <DIO_SetPinDirection+0xe8>
		{
			clr_bit(DDRB,pin);
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_SetPinDirection+0x70>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_SetPinDirection+0x6c>
 106:	80 95       	com	r24
 108:	97 b3       	in	r25, 0x17	; 23
 10a:	89 23       	and	r24, r25
 10c:	87 bb       	out	0x17, r24	; 23
 10e:	08 95       	ret
		}
		break;
		case c :
		if (Dir==OUTPUT)
 110:	41 30       	cpi	r20, 0x01	; 1
 112:	59 f4       	brne	.+22     	; 0x12a <DIO_SetPinDirection+0x98>
		{
			set_bit(DDRC,pin);
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_SetPinDirection+0x8c>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_SetPinDirection+0x88>
 122:	94 b3       	in	r25, 0x14	; 20
 124:	89 2b       	or	r24, r25
 126:	84 bb       	out	0x14, r24	; 20
 128:	08 95       	ret
		}
		if (Dir==INPUT)
 12a:	41 11       	cpse	r20, r1
 12c:	26 c0       	rjmp	.+76     	; 0x17a <DIO_SetPinDirection+0xe8>
		{
			clr_bit(DDRC,pin);
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_SetPinDirection+0xa6>
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	6a 95       	dec	r22
 13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_SetPinDirection+0xa2>
 13c:	80 95       	com	r24
 13e:	94 b3       	in	r25, 0x14	; 20
 140:	89 23       	and	r24, r25
 142:	84 bb       	out	0x14, r24	; 20
 144:	08 95       	ret
		}
		break;
		case d :
		if (Dir==OUTPUT)
 146:	41 30       	cpi	r20, 0x01	; 1
 148:	59 f4       	brne	.+22     	; 0x160 <DIO_SetPinDirection+0xce>
		{
			set_bit(DDRD,pin);
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_SetPinDirection+0xc2>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	6a 95       	dec	r22
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_SetPinDirection+0xbe>
 158:	91 b3       	in	r25, 0x11	; 17
 15a:	89 2b       	or	r24, r25
 15c:	81 bb       	out	0x11, r24	; 17
 15e:	08 95       	ret
		}
		if (Dir==INPUT)
 160:	41 11       	cpse	r20, r1
 162:	0b c0       	rjmp	.+22     	; 0x17a <DIO_SetPinDirection+0xe8>
		{
			clr_bit(DDRD,pin);
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	02 c0       	rjmp	.+4      	; 0x16e <DIO_SetPinDirection+0xdc>
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	6a 95       	dec	r22
 170:	e2 f7       	brpl	.-8      	; 0x16a <DIO_SetPinDirection+0xd8>
 172:	80 95       	com	r24
 174:	91 b3       	in	r25, 0x11	; 17
 176:	89 23       	and	r24, r25
 178:	81 bb       	out	0x11, r24	; 17
 17a:	08 95       	ret

0000017c <DIO_WritePinValue>:
	}
}
extern void DIO_WritePinValue(u8 port,u8 pin,u8 value)
{
	
switch(port)
 17c:	81 30       	cpi	r24, 0x01	; 1
 17e:	11 f1       	breq	.+68     	; 0x1c4 <DIO_WritePinValue+0x48>
 180:	30 f0       	brcs	.+12     	; 0x18e <DIO_WritePinValue+0x12>
 182:	82 30       	cpi	r24, 0x02	; 2
 184:	d1 f1       	breq	.+116    	; 0x1fa <DIO_WritePinValue+0x7e>
 186:	83 30       	cpi	r24, 0x03	; 3
 188:	09 f4       	brne	.+2      	; 0x18c <DIO_WritePinValue+0x10>
 18a:	52 c0       	rjmp	.+164    	; 0x230 <DIO_WritePinValue+0xb4>
 18c:	08 95       	ret
{
	case a :
	if (value==HIGH)
 18e:	41 30       	cpi	r20, 0x01	; 1
 190:	59 f4       	brne	.+22     	; 0x1a8 <DIO_WritePinValue+0x2c>
	{
		set_bit(PORTA,pin);
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_WritePinValue+0x20>
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_WritePinValue+0x1c>
 1a0:	9b b3       	in	r25, 0x1b	; 27
 1a2:	89 2b       	or	r24, r25
 1a4:	8b bb       	out	0x1b, r24	; 27
 1a6:	08 95       	ret
	}
	if (value==LOW)
 1a8:	41 11       	cpse	r20, r1
 1aa:	5c c0       	rjmp	.+184    	; 0x264 <DIO_WritePinValue+0xe8>
	{
		clr_bit(PORTA,pin);
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_WritePinValue+0x3a>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_WritePinValue+0x36>
 1ba:	80 95       	com	r24
 1bc:	9b b3       	in	r25, 0x1b	; 27
 1be:	89 23       	and	r24, r25
 1c0:	8b bb       	out	0x1b, r24	; 27
 1c2:	08 95       	ret
	}
	break;
	case b :
	if (value==HIGH)
 1c4:	41 30       	cpi	r20, 0x01	; 1
 1c6:	59 f4       	brne	.+22     	; 0x1de <DIO_WritePinValue+0x62>
	{
		set_bit(PORTB,pin);
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_WritePinValue+0x56>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_WritePinValue+0x52>
 1d6:	98 b3       	in	r25, 0x18	; 24
 1d8:	89 2b       	or	r24, r25
 1da:	88 bb       	out	0x18, r24	; 24
 1dc:	08 95       	ret
	}
	if (value==LOW)
 1de:	41 11       	cpse	r20, r1
 1e0:	41 c0       	rjmp	.+130    	; 0x264 <DIO_WritePinValue+0xe8>
	{
		clr_bit(PORTB,pin);
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_WritePinValue+0x70>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_WritePinValue+0x6c>
 1f0:	80 95       	com	r24
 1f2:	98 b3       	in	r25, 0x18	; 24
 1f4:	89 23       	and	r24, r25
 1f6:	88 bb       	out	0x18, r24	; 24
 1f8:	08 95       	ret
	}
	break;
	case c :
	if (value==HIGH)
 1fa:	41 30       	cpi	r20, 0x01	; 1
 1fc:	59 f4       	brne	.+22     	; 0x214 <DIO_WritePinValue+0x98>
	{
		set_bit(PORTC,pin);
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_WritePinValue+0x8c>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_WritePinValue+0x88>
 20c:	95 b3       	in	r25, 0x15	; 21
 20e:	89 2b       	or	r24, r25
 210:	85 bb       	out	0x15, r24	; 21
 212:	08 95       	ret
	}
	if (value==LOW)
 214:	41 11       	cpse	r20, r1
 216:	26 c0       	rjmp	.+76     	; 0x264 <DIO_WritePinValue+0xe8>
	{
		clr_bit(PORTC,pin);
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_WritePinValue+0xa6>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_WritePinValue+0xa2>
 226:	80 95       	com	r24
 228:	95 b3       	in	r25, 0x15	; 21
 22a:	89 23       	and	r24, r25
 22c:	85 bb       	out	0x15, r24	; 21
 22e:	08 95       	ret
	}
	break;
	case d :
	if (value==HIGH)
 230:	41 30       	cpi	r20, 0x01	; 1
 232:	59 f4       	brne	.+22     	; 0x24a <DIO_WritePinValue+0xce>
	{
		set_bit(PORTD,pin);
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_WritePinValue+0xc2>
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	6a 95       	dec	r22
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_WritePinValue+0xbe>
 242:	92 b3       	in	r25, 0x12	; 18
 244:	89 2b       	or	r24, r25
 246:	82 bb       	out	0x12, r24	; 18
 248:	08 95       	ret
	}
	if (value==LOW)
 24a:	41 11       	cpse	r20, r1
 24c:	0b c0       	rjmp	.+22     	; 0x264 <DIO_WritePinValue+0xe8>
	{
		clr_bit(PORTD,pin);
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_WritePinValue+0xdc>
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	6a 95       	dec	r22
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_WritePinValue+0xd8>
 25c:	80 95       	com	r24
 25e:	92 b3       	in	r25, 0x12	; 18
 260:	89 23       	and	r24, r25
 262:	82 bb       	out	0x12, r24	; 18
 264:	08 95       	ret

00000266 <DIO_GetPinValue>:
}
}
extern u8 DIO_GetPinValue(u8 port,u8 pin)
{  
	u8 x;
	switch(port)
 266:	81 30       	cpi	r24, 0x01	; 1
 268:	81 f0       	breq	.+32     	; 0x28a <DIO_GetPinValue+0x24>
 26a:	28 f0       	brcs	.+10     	; 0x276 <DIO_GetPinValue+0x10>
 26c:	82 30       	cpi	r24, 0x02	; 2
 26e:	b9 f0       	breq	.+46     	; 0x29e <DIO_GetPinValue+0x38>
 270:	83 30       	cpi	r24, 0x03	; 3
 272:	f9 f0       	breq	.+62     	; 0x2b2 <DIO_GetPinValue+0x4c>
 274:	27 c0       	rjmp	.+78     	; 0x2c4 <DIO_GetPinValue+0x5e>
	{
		case a :
		x= get_bit(PINA,pin);
 276:	89 b3       	in	r24, 0x19	; 25
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_GetPinValue+0x1a>
 27c:	95 95       	asr	r25
 27e:	87 95       	ror	r24
 280:	6a 95       	dec	r22
 282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_GetPinValue+0x16>
 284:	98 2f       	mov	r25, r24
 286:	91 70       	andi	r25, 0x01	; 1
		break;
 288:	1d c0       	rjmp	.+58     	; 0x2c4 <DIO_GetPinValue+0x5e>
		case b :
		x= get_bit(PINB,pin);
 28a:	86 b3       	in	r24, 0x16	; 22
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_GetPinValue+0x2e>
 290:	95 95       	asr	r25
 292:	87 95       	ror	r24
 294:	6a 95       	dec	r22
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_GetPinValue+0x2a>
 298:	98 2f       	mov	r25, r24
 29a:	91 70       	andi	r25, 0x01	; 1
		break;
 29c:	13 c0       	rjmp	.+38     	; 0x2c4 <DIO_GetPinValue+0x5e>
		case c :
		x= get_bit(PINC,pin);
 29e:	83 b3       	in	r24, 0x13	; 19
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_GetPinValue+0x42>
 2a4:	95 95       	asr	r25
 2a6:	87 95       	ror	r24
 2a8:	6a 95       	dec	r22
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_GetPinValue+0x3e>
 2ac:	98 2f       	mov	r25, r24
 2ae:	91 70       	andi	r25, 0x01	; 1
		break;
 2b0:	09 c0       	rjmp	.+18     	; 0x2c4 <DIO_GetPinValue+0x5e>
		case d :
		x= get_bit(PIND,pin);
 2b2:	80 b3       	in	r24, 0x10	; 16
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_GetPinValue+0x56>
 2b8:	95 95       	asr	r25
 2ba:	87 95       	ror	r24
 2bc:	6a 95       	dec	r22
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_GetPinValue+0x52>
 2c0:	98 2f       	mov	r25, r24
 2c2:	91 70       	andi	r25, 0x01	; 1
		break;
	}
	return x;
}
 2c4:	89 2f       	mov	r24, r25
 2c6:	08 95       	ret

000002c8 <DIO_SetPortDirection>:
extern void DIO_SetPortDirection(u8 port,u8 Dir)
{
	switch(port)
 2c8:	81 30       	cpi	r24, 0x01	; 1
 2ca:	79 f0       	breq	.+30     	; 0x2ea <DIO_SetPortDirection+0x22>
 2cc:	28 f0       	brcs	.+10     	; 0x2d8 <DIO_SetPortDirection+0x10>
 2ce:	82 30       	cpi	r24, 0x02	; 2
 2d0:	a9 f0       	breq	.+42     	; 0x2fc <DIO_SetPortDirection+0x34>
 2d2:	83 30       	cpi	r24, 0x03	; 3
 2d4:	e1 f0       	breq	.+56     	; 0x30e <DIO_SetPortDirection+0x46>
 2d6:	08 95       	ret
	{
		case a :
		if (Dir == OUTPUT)
 2d8:	61 30       	cpi	r22, 0x01	; 1
 2da:	19 f4       	brne	.+6      	; 0x2e2 <DIO_SetPortDirection+0x1a>
		{
			DDRA=0XFF;	
 2dc:	8f ef       	ldi	r24, 0xFF	; 255
 2de:	8a bb       	out	0x1a, r24	; 26
 2e0:	08 95       	ret
		}
		if (Dir == INPUT)
 2e2:	61 11       	cpse	r22, r1
 2e4:	1c c0       	rjmp	.+56     	; 0x31e <DIO_SetPortDirection+0x56>
		{
			DDRA=0X00;
 2e6:	1a ba       	out	0x1a, r1	; 26
 2e8:	08 95       	ret
		}
		break;
		case b :
		if (Dir == OUTPUT)
 2ea:	61 30       	cpi	r22, 0x01	; 1
 2ec:	19 f4       	brne	.+6      	; 0x2f4 <DIO_SetPortDirection+0x2c>
		{
			DDRB=0XFF;
 2ee:	8f ef       	ldi	r24, 0xFF	; 255
 2f0:	87 bb       	out	0x17, r24	; 23
 2f2:	08 95       	ret
		}
		if (Dir == INPUT)
 2f4:	61 11       	cpse	r22, r1
 2f6:	13 c0       	rjmp	.+38     	; 0x31e <DIO_SetPortDirection+0x56>
		{
			DDRB=0X00;
 2f8:	17 ba       	out	0x17, r1	; 23
 2fa:	08 95       	ret
		}
		break;
		case c :
		if (Dir == OUTPUT)
 2fc:	61 30       	cpi	r22, 0x01	; 1
 2fe:	19 f4       	brne	.+6      	; 0x306 <DIO_SetPortDirection+0x3e>
		{
			DDRC=0XFF;
 300:	8f ef       	ldi	r24, 0xFF	; 255
 302:	84 bb       	out	0x14, r24	; 20
 304:	08 95       	ret
		}
		if (Dir == INPUT)
 306:	61 11       	cpse	r22, r1
 308:	0a c0       	rjmp	.+20     	; 0x31e <DIO_SetPortDirection+0x56>
		{
			DDRC=0X00;
 30a:	14 ba       	out	0x14, r1	; 20
 30c:	08 95       	ret
		}
		break;
		case d :
		if (Dir == OUTPUT)
 30e:	61 30       	cpi	r22, 0x01	; 1
 310:	19 f4       	brne	.+6      	; 0x318 <DIO_SetPortDirection+0x50>
		{
			DDRD=0XFF;
 312:	8f ef       	ldi	r24, 0xFF	; 255
 314:	81 bb       	out	0x11, r24	; 17
 316:	08 95       	ret
		}
		if (Dir == INPUT)
 318:	61 11       	cpse	r22, r1
 31a:	01 c0       	rjmp	.+2      	; 0x31e <DIO_SetPortDirection+0x56>
		{
			DDRD=0X00;
 31c:	11 ba       	out	0x11, r1	; 17
 31e:	08 95       	ret

00000320 <DIO_WritePortValue>:
		break;
	}
}
extern void DIO_WritePortValue(u8 port,u8 value)
{
	switch(port)
 320:	81 30       	cpi	r24, 0x01	; 1
 322:	41 f0       	breq	.+16     	; 0x334 <DIO_WritePortValue+0x14>
 324:	28 f0       	brcs	.+10     	; 0x330 <DIO_WritePortValue+0x10>
 326:	82 30       	cpi	r24, 0x02	; 2
 328:	39 f0       	breq	.+14     	; 0x338 <DIO_WritePortValue+0x18>
 32a:	83 30       	cpi	r24, 0x03	; 3
 32c:	39 f0       	breq	.+14     	; 0x33c <DIO_WritePortValue+0x1c>
 32e:	08 95       	ret
	{
		case a :
		PORTA =value;
 330:	6b bb       	out	0x1b, r22	; 27
		break;
 332:	08 95       	ret
		case b :
		PORTB=value;
 334:	68 bb       	out	0x18, r22	; 24
		break;
 336:	08 95       	ret
		case c :
		PORTC=value;
 338:	65 bb       	out	0x15, r22	; 21
		break;
 33a:	08 95       	ret
		case d :
		PORTD=value;
 33c:	62 bb       	out	0x12, r22	; 18
 33e:	08 95       	ret

00000340 <keyPad_init>:
u8 keypad_row[]={R0,R1,R2,R3};
u8 keypad_col[]={C0,C1,C2,C3};
extern void keyPad_init(void)
{  
	// first 4 pins are inputs (rows)
	DIO_SetPinDirection(keypad_port,R0,INPUT);
 340:	40 e0       	ldi	r20, 0x00	; 0
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	83 e0       	ldi	r24, 0x03	; 3
 346:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	DIO_SetPinDirection(keypad_port,R1,INPUT);
 34a:	40 e0       	ldi	r20, 0x00	; 0
 34c:	61 e0       	ldi	r22, 0x01	; 1
 34e:	83 e0       	ldi	r24, 0x03	; 3
 350:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	DIO_SetPinDirection(keypad_port,R2,INPUT);
 354:	40 e0       	ldi	r20, 0x00	; 0
 356:	62 e0       	ldi	r22, 0x02	; 2
 358:	83 e0       	ldi	r24, 0x03	; 3
 35a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	DIO_SetPinDirection(keypad_port,R3,INPUT);
 35e:	40 e0       	ldi	r20, 0x00	; 0
 360:	63 e0       	ldi	r22, 0x03	; 3
 362:	83 e0       	ldi	r24, 0x03	; 3
 364:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	// second 4 pins are output 
	DIO_SetPinDirection(keypad_port,C0,OUTPUT);
 368:	41 e0       	ldi	r20, 0x01	; 1
 36a:	64 e0       	ldi	r22, 0x04	; 4
 36c:	83 e0       	ldi	r24, 0x03	; 3
 36e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	DIO_SetPinDirection(keypad_port,C1,OUTPUT);
 372:	41 e0       	ldi	r20, 0x01	; 1
 374:	65 e0       	ldi	r22, 0x05	; 5
 376:	83 e0       	ldi	r24, 0x03	; 3
 378:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
    DIO_SetPinDirection(keypad_port,C2,OUTPUT);
 37c:	41 e0       	ldi	r20, 0x01	; 1
 37e:	66 e0       	ldi	r22, 0x06	; 6
 380:	83 e0       	ldi	r24, 0x03	; 3
 382:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	DIO_SetPinDirection(keypad_port,C3,OUTPUT);
 386:	41 e0       	ldi	r20, 0x01	; 1
 388:	67 e0       	ldi	r22, 0x07	; 7
 38a:	83 e0       	ldi	r24, 0x03	; 3
 38c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	// pull up port
	DIO_WritePortValue(keypad_port,0XFF);
 390:	6f ef       	ldi	r22, 0xFF	; 255
 392:	83 e0       	ldi	r24, 0x03	; 3
 394:	0e 94 90 01 	call	0x320	; 0x320 <DIO_WritePortValue>
 398:	08 95       	ret

0000039a <keyPad_GetKey>:
}
extern u8 keyPad_GetKey(void)
{
 39a:	8f 92       	push	r8
 39c:	9f 92       	push	r9
 39e:	af 92       	push	r10
 3a0:	bf 92       	push	r11
 3a2:	cf 92       	push	r12
 3a4:	df 92       	push	r13
 3a6:	ef 92       	push	r14
 3a8:	ff 92       	push	r15
 3aa:	0f 93       	push	r16
 3ac:	1f 93       	push	r17
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
 3b2:	0f 2e       	mov	r0, r31
 3b4:	f0 e6       	ldi	r31, 0x60	; 96
 3b6:	af 2e       	mov	r10, r31
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	bf 2e       	mov	r11, r31
 3bc:	f0 2d       	mov	r31, r0
	int i,j;
	for(i=0;i<4;i++)
 3be:	c1 2c       	mov	r12, r1
 3c0:	d1 2c       	mov	r13, r1
	{
		DIO_WritePinValue(keypad_port,C0,HIGH);
 3c2:	41 e0       	ldi	r20, 0x01	; 1
 3c4:	64 e0       	ldi	r22, 0x04	; 4
 3c6:	83 e0       	ldi	r24, 0x03	; 3
 3c8:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_WritePinValue>
		DIO_WritePinValue(keypad_port,C1,HIGH);
 3cc:	41 e0       	ldi	r20, 0x01	; 1
 3ce:	65 e0       	ldi	r22, 0x05	; 5
 3d0:	83 e0       	ldi	r24, 0x03	; 3
 3d2:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_WritePinValue>
		DIO_WritePinValue(keypad_port,C2,HIGH);
 3d6:	41 e0       	ldi	r20, 0x01	; 1
 3d8:	66 e0       	ldi	r22, 0x06	; 6
 3da:	83 e0       	ldi	r24, 0x03	; 3
 3dc:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_WritePinValue>
		DIO_WritePinValue(keypad_port,C3,HIGH);
 3e0:	41 e0       	ldi	r20, 0x01	; 1
 3e2:	67 e0       	ldi	r22, 0x07	; 7
 3e4:	83 e0       	ldi	r24, 0x03	; 3
 3e6:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_WritePinValue>
		
		DIO_WritePinValue(keypad_port,keypad_col[i],LOW);
 3ea:	f5 01       	movw	r30, r10
 3ec:	61 91       	ld	r22, Z+
 3ee:	5f 01       	movw	r10, r30
 3f0:	40 e0       	ldi	r20, 0x00	; 0
 3f2:	83 e0       	ldi	r24, 0x03	; 3
 3f4:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_WritePinValue>
 3f8:	04 e6       	ldi	r16, 0x64	; 100
 3fa:	10 e0       	ldi	r17, 0x00	; 0
 3fc:	e1 2c       	mov	r14, r1
 3fe:	f1 2c       	mov	r15, r1
 400:	81 2c       	mov	r8, r1
 402:	91 2c       	mov	r9, r1
 404:	05 c0       	rjmp	.+10     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 406:	ff ef       	ldi	r31, 0xFF	; 255
 408:	8f 1a       	sub	r8, r31
 40a:	9f 0a       	sbc	r9, r31
 40c:	0f 5f       	subi	r16, 0xFF	; 255
 40e:	1f 4f       	sbci	r17, 0xFF	; 255
 410:	e8 01       	movw	r28, r16
 412:	8f ef       	ldi	r24, 0xFF	; 255
 414:	e8 1a       	sub	r14, r24
 416:	f8 0a       	sbc	r15, r24
		for(j=0;j<4;j++)
		{
			if((DIO_GetPinValue(keypad_port,keypad_row[j]))==0)
 418:	68 81       	ld	r22, Y
 41a:	83 e0       	ldi	r24, 0x03	; 3
 41c:	0e 94 33 01 	call	0x266	; 0x266 <DIO_GetPinValue>
 420:	81 11       	cpse	r24, r1
 422:	4d c0       	rjmp	.+154    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
			{
				while((DIO_GetPinValue(keypad_port,keypad_row[j]))==0) ;  //single pressed
 424:	68 81       	ld	r22, Y
 426:	83 e0       	ldi	r24, 0x03	; 3
 428:	0e 94 33 01 	call	0x266	; 0x266 <DIO_GetPinValue>
 42c:	88 23       	and	r24, r24
 42e:	d1 f3       	breq	.-12     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
				switch(i)
 430:	e1 e0       	ldi	r30, 0x01	; 1
 432:	ce 16       	cp	r12, r30
 434:	d1 04       	cpc	r13, r1
 436:	e1 f0       	breq	.+56     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 438:	24 f4       	brge	.+8      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 43a:	c1 14       	cp	r12, r1
 43c:	d1 04       	cpc	r13, r1
 43e:	51 f0       	breq	.+20     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 440:	3e c0       	rjmp	.+124    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 442:	82 e0       	ldi	r24, 0x02	; 2
 444:	c8 16       	cp	r12, r24
 446:	d1 04       	cpc	r13, r1
 448:	01 f1       	breq	.+64     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 44a:	e3 e0       	ldi	r30, 0x03	; 3
 44c:	ce 16       	cp	r12, r30
 44e:	d1 04       	cpc	r13, r1
 450:	49 f1       	breq	.+82     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 452:	35 c0       	rjmp	.+106    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 454:	c4 01       	movw	r24, r8
				{
					case 0 :
						{
							if(j == 0) return '7';
 456:	81 14       	cp	r8, r1
 458:	91 04       	cpc	r9, r1
 45a:	09 f4       	brne	.+2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 45c:	3f c0       	rjmp	.+126    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
							else if(j == 1) return '4';
 45e:	81 30       	cpi	r24, 0x01	; 1
 460:	91 05       	cpc	r25, r1
 462:	f1 f1       	breq	.+124    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
							else if(j == 2) return '1';
 464:	82 30       	cpi	r24, 0x02	; 2
 466:	91 05       	cpc	r25, r1
 468:	e9 f1       	breq	.+122    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
							else if(j == 3) return '?';
 46a:	03 97       	sbiw	r24, 0x03	; 3
 46c:	41 f5       	brne	.+80     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 46e:	3c c0       	rjmp	.+120    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 470:	c4 01       	movw	r24, r8
							break;
						}
					case 1 :
					   {
						    if(j == 0) return '8';
 472:	81 14       	cp	r8, r1
 474:	91 04       	cpc	r9, r1
 476:	d1 f1       	breq	.+116    	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
						    else if(j == 1) return '5';
 478:	81 30       	cpi	r24, 0x01	; 1
 47a:	91 05       	cpc	r25, r1
 47c:	c9 f1       	breq	.+114    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
						    else if(j == 2) return '2';
 47e:	82 30       	cpi	r24, 0x02	; 2
 480:	91 05       	cpc	r25, r1
 482:	c1 f1       	breq	.+112    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
						    else if(j == 3) return '0';
 484:	03 97       	sbiw	r24, 0x03	; 3
 486:	d9 f4       	brne	.+54     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 488:	37 c0       	rjmp	.+110    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 48a:	c4 01       	movw	r24, r8
						    break;
					    }
					case 2 :
					   {
						    if(j == 0) return '9';
 48c:	81 14       	cp	r8, r1
 48e:	91 04       	cpc	r9, r1
 490:	a9 f1       	breq	.+106    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
						    else if(j == 1) return '6';
 492:	81 30       	cpi	r24, 0x01	; 1
 494:	91 05       	cpc	r25, r1
 496:	a1 f1       	breq	.+104    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
						    else if(j == 2) return '3';
 498:	82 30       	cpi	r24, 0x02	; 2
 49a:	91 05       	cpc	r25, r1
 49c:	99 f1       	breq	.+102    	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
						    else if(j == 3) return '=';
 49e:	03 97       	sbiw	r24, 0x03	; 3
 4a0:	71 f4       	brne	.+28     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 4a2:	32 c0       	rjmp	.+100    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 4a4:	c4 01       	movw	r24, r8
						    break;
					   }
					case 3 :
					{
						if(j == 0) return '/';
 4a6:	81 14       	cp	r8, r1
 4a8:	91 04       	cpc	r9, r1
 4aa:	81 f1       	breq	.+96     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
						else if(j == 1) return '*';
 4ac:	81 30       	cpi	r24, 0x01	; 1
 4ae:	91 05       	cpc	r25, r1
 4b0:	79 f1       	breq	.+94     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
						else if(j == 2) return '-';
 4b2:	82 30       	cpi	r24, 0x02	; 2
 4b4:	91 05       	cpc	r25, r1
 4b6:	71 f1       	breq	.+92     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
						else if(j == 3) return '+';
 4b8:	03 97       	sbiw	r24, 0x03	; 3
 4ba:	81 f5       	brne	.+96     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
 4bc:	2d c0       	rjmp	.+90     	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
		DIO_WritePinValue(keypad_port,C1,HIGH);
		DIO_WritePinValue(keypad_port,C2,HIGH);
		DIO_WritePinValue(keypad_port,C3,HIGH);
		
		DIO_WritePinValue(keypad_port,keypad_col[i],LOW);
		for(j=0;j<4;j++)
 4be:	f4 e0       	ldi	r31, 0x04	; 4
 4c0:	ef 16       	cp	r14, r31
 4c2:	f1 04       	cpc	r15, r1
 4c4:	0c f4       	brge	.+2      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4c6:	9f cf       	rjmp	.-194    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	DIO_WritePortValue(keypad_port,0XFF);
}
extern u8 keyPad_GetKey(void)
{
	int i,j;
	for(i=0;i<4;i++)
 4c8:	8f ef       	ldi	r24, 0xFF	; 255
 4ca:	c8 1a       	sub	r12, r24
 4cc:	d8 0a       	sbc	r13, r24
 4ce:	e4 e0       	ldi	r30, 0x04	; 4
 4d0:	ce 16       	cp	r12, r30
 4d2:	d1 04       	cpc	r13, r1
 4d4:	09 f0       	breq	.+2      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 4d6:	75 cf       	rjmp	.-278    	; 0x3c2 <keyPad_GetKey+0x28>
					
				}
			}
		}
	}
	return 'A';  // return A if no key is pressed 
 4d8:	81 e4       	ldi	r24, 0x41	; 65
 4da:	26 c0       	rjmp	.+76     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
				while((DIO_GetPinValue(keypad_port,keypad_row[j]))==0) ;  //single pressed
				switch(i)
				{
					case 0 :
						{
							if(j == 0) return '7';
 4dc:	87 e3       	ldi	r24, 0x37	; 55
 4de:	24 c0       	rjmp	.+72     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
							else if(j == 1) return '4';
 4e0:	84 e3       	ldi	r24, 0x34	; 52
 4e2:	22 c0       	rjmp	.+68     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
							else if(j == 2) return '1';
 4e4:	81 e3       	ldi	r24, 0x31	; 49
 4e6:	20 c0       	rjmp	.+64     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
							else if(j == 3) return '?';
 4e8:	8f e3       	ldi	r24, 0x3F	; 63
 4ea:	1e c0       	rjmp	.+60     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
							break;
						}
					case 1 :
					   {
						    if(j == 0) return '8';
 4ec:	88 e3       	ldi	r24, 0x38	; 56
 4ee:	1c c0       	rjmp	.+56     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
						    else if(j == 1) return '5';
 4f0:	85 e3       	ldi	r24, 0x35	; 53
 4f2:	1a c0       	rjmp	.+52     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
						    else if(j == 2) return '2';
 4f4:	82 e3       	ldi	r24, 0x32	; 50
 4f6:	18 c0       	rjmp	.+48     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
						    else if(j == 3) return '0';
 4f8:	80 e3       	ldi	r24, 0x30	; 48
 4fa:	16 c0       	rjmp	.+44     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
						    break;
					    }
					case 2 :
					   {
						    if(j == 0) return '9';
 4fc:	89 e3       	ldi	r24, 0x39	; 57
 4fe:	14 c0       	rjmp	.+40     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
						    else if(j == 1) return '6';
 500:	86 e3       	ldi	r24, 0x36	; 54
 502:	12 c0       	rjmp	.+36     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
						    else if(j == 2) return '3';
 504:	83 e3       	ldi	r24, 0x33	; 51
 506:	10 c0       	rjmp	.+32     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
						    else if(j == 3) return '=';
 508:	8d e3       	ldi	r24, 0x3D	; 61
 50a:	0e c0       	rjmp	.+28     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
						    break;
					   }
					case 3 :
					{
						if(j == 0) return '/';
 50c:	8f e2       	ldi	r24, 0x2F	; 47
 50e:	0c c0       	rjmp	.+24     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
						else if(j == 1) return '*';
 510:	8a e2       	ldi	r24, 0x2A	; 42
 512:	0a c0       	rjmp	.+20     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
						else if(j == 2) return '-';
 514:	8d e2       	ldi	r24, 0x2D	; 45
 516:	08 c0       	rjmp	.+16     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
						else if(j == 3) return '+';
 518:	8b e2       	ldi	r24, 0x2B	; 43
 51a:	06 c0       	rjmp	.+12     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
		DIO_WritePinValue(keypad_port,C1,HIGH);
		DIO_WritePinValue(keypad_port,C2,HIGH);
		DIO_WritePinValue(keypad_port,C3,HIGH);
		
		DIO_WritePinValue(keypad_port,keypad_col[i],LOW);
		for(j=0;j<4;j++)
 51c:	f4 e0       	ldi	r31, 0x04	; 4
 51e:	ef 16       	cp	r14, r31
 520:	f1 04       	cpc	r15, r1
 522:	0c f4       	brge	.+2      	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
 524:	70 cf       	rjmp	.-288    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
					
				}
			}
		}
	}
	return 'A';  // return A if no key is pressed 
 526:	81 e4       	ldi	r24, 0x41	; 65
 528:	df 91       	pop	r29
 52a:	cf 91       	pop	r28
 52c:	1f 91       	pop	r17
 52e:	0f 91       	pop	r16
 530:	ff 90       	pop	r15
 532:	ef 90       	pop	r14
 534:	df 90       	pop	r13
 536:	cf 90       	pop	r12
 538:	bf 90       	pop	r11
 53a:	af 90       	pop	r10
 53c:	9f 90       	pop	r9
 53e:	8f 90       	pop	r8
 540:	08 95       	ret

00000542 <LCD_Kick>:
extern void LCD_display_number(u8 number)
{    
	  u8 str[7];
	 sprintf(str,"%d",number);
	 LCD_display_String(str);
}
 542:	41 e0       	ldi	r20, 0x01	; 1
 544:	61 e0       	ldi	r22, 0x01	; 1
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_WritePinValue>
 54c:	83 ed       	ldi	r24, 0xD3	; 211
 54e:	90 e3       	ldi	r25, 0x30	; 48
 550:	01 97       	sbiw	r24, 0x01	; 1
 552:	f1 f7       	brne	.-4      	; 0x550 <LCD_Kick+0xe>
 554:	00 c0       	rjmp	.+0      	; 0x556 <LCD_Kick+0x14>
 556:	00 00       	nop
 558:	40 e0       	ldi	r20, 0x00	; 0
 55a:	61 e0       	ldi	r22, 0x01	; 1
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_WritePinValue>
 562:	08 95       	ret

00000564 <LCD_send_command>:
 564:	cf 93       	push	r28
 566:	c8 2f       	mov	r28, r24
 568:	61 e0       	ldi	r22, 0x01	; 1
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <DIO_SetPortDirection>
 570:	40 e0       	ldi	r20, 0x00	; 0
 572:	62 e0       	ldi	r22, 0x02	; 2
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_WritePinValue>
 57a:	40 e0       	ldi	r20, 0x00	; 0
 57c:	60 e0       	ldi	r22, 0x00	; 0
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_WritePinValue>
 584:	6c 2f       	mov	r22, r28
 586:	80 e0       	ldi	r24, 0x00	; 0
 588:	0e 94 90 01 	call	0x320	; 0x320 <DIO_WritePortValue>
 58c:	0e 94 a1 02 	call	0x542	; 0x542 <LCD_Kick>
 590:	cf 91       	pop	r28
 592:	08 95       	ret

00000594 <LCD_display_charcter>:
 594:	cf 93       	push	r28
 596:	c8 2f       	mov	r28, r24
 598:	61 e0       	ldi	r22, 0x01	; 1
 59a:	80 e0       	ldi	r24, 0x00	; 0
 59c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <DIO_SetPortDirection>
 5a0:	41 e0       	ldi	r20, 0x01	; 1
 5a2:	62 e0       	ldi	r22, 0x02	; 2
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_WritePinValue>
 5aa:	40 e0       	ldi	r20, 0x00	; 0
 5ac:	60 e0       	ldi	r22, 0x00	; 0
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_WritePinValue>
 5b4:	6c 2f       	mov	r22, r28
 5b6:	80 e0       	ldi	r24, 0x00	; 0
 5b8:	0e 94 90 01 	call	0x320	; 0x320 <DIO_WritePortValue>
 5bc:	0e 94 a1 02 	call	0x542	; 0x542 <LCD_Kick>
 5c0:	cf 91       	pop	r28
 5c2:	08 95       	ret

000005c4 <LCD_clear_screen>:
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	0e 94 b2 02 	call	0x564	; 0x564 <LCD_send_command>
 5ca:	08 95       	ret

000005cc <LCD_init>:
 5cc:	87 e8       	ldi	r24, 0x87	; 135
 5ce:	93 e1       	ldi	r25, 0x13	; 19
 5d0:	01 97       	sbiw	r24, 0x01	; 1
 5d2:	f1 f7       	brne	.-4      	; 0x5d0 <LCD_init+0x4>
 5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <LCD_init+0xa>
 5d6:	00 00       	nop
 5d8:	61 e0       	ldi	r22, 0x01	; 1
 5da:	80 e0       	ldi	r24, 0x00	; 0
 5dc:	0e 94 64 01 	call	0x2c8	; 0x2c8 <DIO_SetPortDirection>
 5e0:	61 e0       	ldi	r22, 0x01	; 1
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	0e 94 64 01 	call	0x2c8	; 0x2c8 <DIO_SetPortDirection>
 5e8:	40 e0       	ldi	r20, 0x00	; 0
 5ea:	60 e0       	ldi	r22, 0x00	; 0
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_WritePinValue>
 5f2:	40 e0       	ldi	r20, 0x00	; 0
 5f4:	61 e0       	ldi	r22, 0x01	; 1
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_WritePinValue>
 5fc:	40 e0       	ldi	r20, 0x00	; 0
 5fe:	62 e0       	ldi	r22, 0x02	; 2
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_WritePinValue>
 606:	88 e3       	ldi	r24, 0x38	; 56
 608:	0e 94 b2 02 	call	0x564	; 0x564 <LCD_send_command>
 60c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <LCD_clear_screen>
 610:	86 e0       	ldi	r24, 0x06	; 6
 612:	0e 94 b2 02 	call	0x564	; 0x564 <LCD_send_command>
 616:	80 e8       	ldi	r24, 0x80	; 128
 618:	0e 94 b2 02 	call	0x564	; 0x564 <LCD_send_command>
 61c:	8f e0       	ldi	r24, 0x0F	; 15
 61e:	0e 94 b2 02 	call	0x564	; 0x564 <LCD_send_command>
 622:	08 95       	ret

00000624 <LCD_display_String>:
 624:	0f 93       	push	r16
 626:	1f 93       	push	r17
 628:	cf 93       	push	r28
 62a:	df 93       	push	r29
 62c:	d8 2f       	mov	r29, r24
 62e:	c9 2f       	mov	r28, r25
 630:	61 e0       	ldi	r22, 0x01	; 1
 632:	80 e0       	ldi	r24, 0x00	; 0
 634:	0e 94 64 01 	call	0x2c8	; 0x2c8 <DIO_SetPortDirection>
 638:	41 e0       	ldi	r20, 0x01	; 1
 63a:	62 e0       	ldi	r22, 0x02	; 2
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_WritePinValue>
 642:	40 e0       	ldi	r20, 0x00	; 0
 644:	60 e0       	ldi	r22, 0x00	; 0
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_WritePinValue>
 64c:	0d 2f       	mov	r16, r29
 64e:	1c 2f       	mov	r17, r28
 650:	c0 e0       	ldi	r28, 0x00	; 0
 652:	11 c0       	rjmp	.+34     	; 0x676 <LCD_display_String+0x52>
 654:	cf 5f       	subi	r28, 0xFF	; 255
 656:	0e 94 ca 02 	call	0x594	; 0x594 <LCD_display_charcter>
 65a:	c0 31       	cpi	r28, 0x10	; 16
 65c:	21 f4       	brne	.+8      	; 0x666 <LCD_display_String+0x42>
 65e:	80 ec       	ldi	r24, 0xC0	; 192
 660:	0e 94 b2 02 	call	0x564	; 0x564 <LCD_send_command>
 664:	08 c0       	rjmp	.+16     	; 0x676 <LCD_display_String+0x52>
 666:	c0 32       	cpi	r28, 0x20	; 32
 668:	31 f4       	brne	.+12     	; 0x676 <LCD_display_String+0x52>
 66a:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <LCD_clear_screen>
 66e:	80 e8       	ldi	r24, 0x80	; 128
 670:	0e 94 b2 02 	call	0x564	; 0x564 <LCD_send_command>
 674:	c0 e0       	ldi	r28, 0x00	; 0
 676:	f8 01       	movw	r30, r16
 678:	81 91       	ld	r24, Z+
 67a:	8f 01       	movw	r16, r30
 67c:	81 11       	cpse	r24, r1
 67e:	ea cf       	rjmp	.-44     	; 0x654 <LCD_display_String+0x30>
 680:	df 91       	pop	r29
 682:	cf 91       	pop	r28
 684:	1f 91       	pop	r17
 686:	0f 91       	pop	r16
 688:	08 95       	ret

0000068a <LCD_GoTo_xy>:
{
	LCD_send_command(LCD_CLR_DIS_AND_DDRAM);
}
extern void LCD_GoTo_xy(u8 row, u8 position)
{
	if (row == 0)
 68a:	81 11       	cpse	r24, r1
 68c:	05 c0       	rjmp	.+10     	; 0x698 <LCD_GoTo_xy+0xe>
	{
		LCD_send_command(0x80+position);
 68e:	80 e8       	ldi	r24, 0x80	; 128
 690:	86 0f       	add	r24, r22
 692:	0e 94 b2 02 	call	0x564	; 0x564 <LCD_send_command>
 696:	08 95       	ret
	}
	else if (row == 1)
 698:	81 30       	cpi	r24, 0x01	; 1
 69a:	21 f4       	brne	.+8      	; 0x6a4 <LCD_GoTo_xy+0x1a>
	{
		LCD_send_command(0xC0+position);
 69c:	80 ec       	ldi	r24, 0xC0	; 192
 69e:	86 0f       	add	r24, r22
 6a0:	0e 94 b2 02 	call	0x564	; 0x564 <LCD_send_command>
 6a4:	08 95       	ret

000006a6 <main>:
#include "util/delay.h"
u16 password =1234;
u8 string_pass[5];
int main(void)
{    int i;
	 keyPad_init();
 6a6:	0e 94 a0 01 	call	0x340	; 0x340 <keyPad_init>
	LCD_init();
 6aa:	0e 94 e6 02 	call	0x5cc	; 0x5cc <LCD_init>
	int key_value;
	u16 entered_pass;
LCD_display_String("enter password");
 6ae:	8a e6       	ldi	r24, 0x6A	; 106
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	0e 94 12 03 	call	0x624	; 0x624 <LCD_display_String>
LCD_GoTo_xy(1,0);
 6b6:	60 e0       	ldi	r22, 0x00	; 0
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	0e 94 45 03 	call	0x68a	; 0x68a <LCD_GoTo_xy>
			}
			for(i=0;i<5;i++)
			{
				string_pass[i]=0;
			}
			i=0;
 6be:	f1 2c       	mov	r15, r1
 6c0:	d0 e0       	ldi	r29, 0x00	; 0
	int key_value;
	u16 entered_pass;
LCD_display_String("enter password");
LCD_GoTo_xy(1,0);
	while (1)
	{   key_value=keyPad_GetKey();
 6c2:	0e 94 cd 01 	call	0x39a	; 0x39a <keyPad_GetKey>
 6c6:	c8 2f       	mov	r28, r24
		switch(key_value)
 6c8:	8f 33       	cpi	r24, 0x3F	; 63
 6ca:	29 f0       	breq	.+10     	; 0x6d6 <main+0x30>
 6cc:	81 34       	cpi	r24, 0x41	; 65
 6ce:	39 f1       	breq	.+78     	; 0x71e <main+0x78>
 6d0:	8d 33       	cpi	r24, 0x3D	; 61
 6d2:	e9 f4       	brne	.+58     	; 0x70e <main+0x68>
 6d4:	03 c0       	rjmp	.+6      	; 0x6dc <main+0x36>
		{
			case 'A' :
			break;
			
			case '?' :
			LCD_clear_screen();
 6d6:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <LCD_clear_screen>
			break;
 6da:	21 c0       	rjmp	.+66     	; 0x71e <main+0x78>
			case '=' :
			entered_pass=atoi(string_pass);
 6dc:	88 e8       	ldi	r24, 0x88	; 136
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	0e 94 a0 03 	call	0x740	; 0x740 <atoi>
			if (entered_pass==password)
 6e4:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <password>
 6e8:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <password+0x1>
 6ec:	82 17       	cp	r24, r18
 6ee:	93 07       	cpc	r25, r19
 6f0:	39 f4       	brne	.+14     	; 0x700 <main+0x5a>
			{
				LCD_clear_screen();
 6f2:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <LCD_clear_screen>
				LCD_display_String("correct pass");
 6f6:	8b e7       	ldi	r24, 0x7B	; 123
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	0e 94 12 03 	call	0x624	; 0x624 <LCD_display_String>
 6fe:	16 c0       	rjmp	.+44     	; 0x72c <main+0x86>
			}
			else
			{
				LCD_clear_screen();
 700:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <LCD_clear_screen>
				LCD_display_String("incorrect pass");
 704:	89 e7       	ldi	r24, 0x79	; 121
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	0e 94 12 03 	call	0x624	; 0x624 <LCD_display_String>
 70c:	0f c0       	rjmp	.+30     	; 0x72c <main+0x86>
				string_pass[i]=0;
			}
			i=0;
			break;
			default :
			LCD_display_charcter(key_value);
 70e:	0e 94 ca 02 	call	0x594	; 0x594 <LCD_display_charcter>
			string_pass[i++]=key_value;
 712:	f8 01       	movw	r30, r16
 714:	e8 57       	subi	r30, 0x78	; 120
 716:	ff 4f       	sbci	r31, 0xFF	; 255
 718:	c0 83       	st	Z, r28
 71a:	0f 5f       	subi	r16, 0xFF	; 255
 71c:	1f 4f       	sbci	r17, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 71e:	83 ed       	ldi	r24, 0xD3	; 211
 720:	90 e3       	ldi	r25, 0x30	; 48
 722:	01 97       	sbiw	r24, 0x01	; 1
 724:	f1 f7       	brne	.-4      	; 0x722 <main+0x7c>
 726:	00 c0       	rjmp	.+0      	; 0x728 <main+0x82>
 728:	00 00       	nop
 72a:	cb cf       	rjmp	.-106    	; 0x6c2 <main+0x1c>
				LCD_clear_screen();
				LCD_display_String("incorrect pass");
			}
			for(i=0;i<5;i++)
			{
				string_pass[i]=0;
 72c:	e8 e8       	ldi	r30, 0x88	; 136
 72e:	f0 e0       	ldi	r31, 0x00	; 0
 730:	10 82       	st	Z, r1
 732:	11 82       	std	Z+1, r1	; 0x01
 734:	12 82       	std	Z+2, r1	; 0x02
 736:	13 82       	std	Z+3, r1	; 0x03
 738:	14 82       	std	Z+4, r1	; 0x04
			}
			i=0;
 73a:	0f 2d       	mov	r16, r15
 73c:	1d 2f       	mov	r17, r29
 73e:	ef cf       	rjmp	.-34     	; 0x71e <main+0x78>

00000740 <atoi>:
 740:	fc 01       	movw	r30, r24
 742:	88 27       	eor	r24, r24
 744:	99 27       	eor	r25, r25
 746:	e8 94       	clt
 748:	21 91       	ld	r18, Z+
 74a:	20 32       	cpi	r18, 0x20	; 32
 74c:	e9 f3       	breq	.-6      	; 0x748 <atoi+0x8>
 74e:	29 30       	cpi	r18, 0x09	; 9
 750:	10 f0       	brcs	.+4      	; 0x756 <atoi+0x16>
 752:	2e 30       	cpi	r18, 0x0E	; 14
 754:	c8 f3       	brcs	.-14     	; 0x748 <atoi+0x8>
 756:	2b 32       	cpi	r18, 0x2B	; 43
 758:	41 f0       	breq	.+16     	; 0x76a <atoi+0x2a>
 75a:	2d 32       	cpi	r18, 0x2D	; 45
 75c:	39 f4       	brne	.+14     	; 0x76c <atoi+0x2c>
 75e:	68 94       	set
 760:	04 c0       	rjmp	.+8      	; 0x76a <atoi+0x2a>
 762:	0e 94 be 03 	call	0x77c	; 0x77c <__mulhi_const_10>
 766:	82 0f       	add	r24, r18
 768:	91 1d       	adc	r25, r1
 76a:	21 91       	ld	r18, Z+
 76c:	20 53       	subi	r18, 0x30	; 48
 76e:	2a 30       	cpi	r18, 0x0A	; 10
 770:	c0 f3       	brcs	.-16     	; 0x762 <atoi+0x22>
 772:	1e f4       	brtc	.+6      	; 0x77a <atoi+0x3a>
 774:	90 95       	com	r25
 776:	81 95       	neg	r24
 778:	9f 4f       	sbci	r25, 0xFF	; 255
 77a:	08 95       	ret

0000077c <__mulhi_const_10>:
 77c:	7a e0       	ldi	r23, 0x0A	; 10
 77e:	97 9f       	mul	r25, r23
 780:	90 2d       	mov	r25, r0
 782:	87 9f       	mul	r24, r23
 784:	80 2d       	mov	r24, r0
 786:	91 0d       	add	r25, r1
 788:	11 24       	eor	r1, r1
 78a:	08 95       	ret

0000078c <_exit>:
 78c:	f8 94       	cli

0000078e <__stop_program>:
 78e:	ff cf       	rjmp	.-2      	; 0x78e <__stop_program>
