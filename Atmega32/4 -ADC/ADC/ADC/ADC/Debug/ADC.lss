
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f00  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000776  00000000  00000000  00001310  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000063f  00000000  00000000  00001a86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000174  00000000  00000000  000020c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000079a  00000000  00000000  0000223c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000053b  00000000  00000000  000029d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002f11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__vector_16>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 d6 00 	call	0x1ac	; 0x1ac <main>
  74:	0c 94 4e 01 	jmp	0x29c	; 0x29c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_enable>:
{
	set_bit(ADCSRA,ADCSRA_ADSC);
}
extern void ADC_stop_convertion(void)
{
	clr_bit(ADCSRA,ADCSRA_ADSC);
  7c:	37 9a       	sbi	0x06, 7	; 6
  7e:	08 95       	ret

00000080 <ADC_start_convertion>:
  80:	36 9a       	sbi	0x06, 6	; 6
  82:	08 95       	ret

00000084 <ADC_init>:
}
extern void ADC_init(struct S_ADC_cofiguration ADC_config)
{
  84:	cf 93       	push	r28
  86:	df 93       	push	r29
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  8c:	27 97       	sbiw	r28, 0x07	; 7
  8e:	0f b6       	in	r0, 0x3f	; 63
  90:	f8 94       	cli
  92:	de bf       	out	0x3e, r29	; 62
  94:	0f be       	out	0x3f, r0	; 63
  96:	cd bf       	out	0x3d, r28	; 61
  98:	29 83       	std	Y+1, r18	; 0x01
  9a:	3a 83       	std	Y+2, r19	; 0x02
  9c:	4b 83       	std	Y+3, r20	; 0x03
  9e:	5c 83       	std	Y+4, r21	; 0x04
  a0:	6d 83       	std	Y+5, r22	; 0x05
  a2:	7e 83       	std	Y+6, r23	; 0x06
  a4:	8f 83       	std	Y+7, r24	; 0x07
	
	
//------ ------------clock config------------------------------------	
	ADCSRA &=0b11111000;   // clear first 3 bits  ADPS2:0
  a6:	86 b1       	in	r24, 0x06	; 6
  a8:	88 7f       	andi	r24, 0xF8	; 248
  aa:	86 b9       	out	0x06, r24	; 6
	ADCSRA |=ADC_config.Clock_selector;  // the enum is arranged with respect to selected clock 
  ac:	96 b1       	in	r25, 0x06	; 6
  ae:	8d 81       	ldd	r24, Y+5	; 0x05
  b0:	89 2b       	or	r24, r25
  b2:	86 b9       	out	0x06, r24	; 6
	
	
//---------------auto triggering----------------------------------------------
ADCSRA &=0b11011111; // clear ADATE bit
  b4:	35 98       	cbi	0x06, 5	; 6
ADCSRA |=(ADC_config.autoTrigger_enable<<ADCSRA_ADATE);  // enable or disable auto triggering
  b6:	26 b1       	in	r18, 0x06	; 6
  b8:	9f 81       	ldd	r25, Y+7	; 0x07
  ba:	30 e2       	ldi	r19, 0x20	; 32
  bc:	93 9f       	mul	r25, r19
  be:	c0 01       	movw	r24, r0
  c0:	11 24       	eor	r1, r1
  c2:	82 2b       	or	r24, r18
  c4:	86 b9       	out	0x06, r24	; 6

//-------------------ADC interrupt enable-----------------------------------------------------
ADCSRA &=0b11110111; // clear ADIE bit
  c6:	33 98       	cbi	0x06, 3	; 6
ADCSRA |=(ADC_config.Interrupt_Enable<<ADCSRA_ADIE);
  c8:	96 b1       	in	r25, 0x06	; 6
  ca:	8e 81       	ldd	r24, Y+6	; 0x06
  cc:	88 0f       	add	r24, r24
  ce:	88 0f       	add	r24, r24
  d0:	88 0f       	add	r24, r24
  d2:	89 2b       	or	r24, r25
  d4:	86 b9       	out	0x06, r24	; 6

//--------------------select channel type and mode single ended or differential etc-----------------------------------------
ADMUX &=0b11100000;   // clear MUX4:0
  d6:	87 b1       	in	r24, 0x07	; 7
  d8:	80 7e       	andi	r24, 0xE0	; 224
  da:	87 b9       	out	0x07, r24	; 7
ADMUX |=(ADC_config.Channels); // no need to shift they are the first 5 bits
  dc:	97 b1       	in	r25, 0x07	; 7
  de:	8b 81       	ldd	r24, Y+3	; 0x03
  e0:	89 2b       	or	r24, r25
  e2:	87 b9       	out	0x07, r24	; 7


//------------------Vref select--------------------------------------
ADMUX &=0b00111111;   // clear REFS1 and REFS0 
  e4:	87 b1       	in	r24, 0x07	; 7
  e6:	8f 73       	andi	r24, 0x3F	; 63
  e8:	87 b9       	out	0x07, r24	; 7
ADMUX |=(ADC_config.Vref_selector<<ADMUX_REFS0);  // the enum is arranged with respect to VREF and shifted lift by 6
  ea:	27 b1       	in	r18, 0x07	; 7
  ec:	9a 81       	ldd	r25, Y+2	; 0x02
  ee:	30 e4       	ldi	r19, 0x40	; 64
  f0:	93 9f       	mul	r25, r19
  f2:	c0 01       	movw	r24, r0
  f4:	11 24       	eor	r1, r1
  f6:	82 2b       	or	r24, r18
  f8:	87 b9       	out	0x07, r24	; 7

//--------------bits positioning into ADCL and ADCH---------------------------------------
ADMUX &=0b11011111;   // clear ADLAR
  fa:	3d 98       	cbi	0x07, 5	; 7
ADMUX |=(ADC_config.Register_Shift<<ADMUX_ADLAR);
  fc:	27 b1       	in	r18, 0x07	; 7
  fe:	9c 81       	ldd	r25, Y+4	; 0x04
 100:	30 e2       	ldi	r19, 0x20	; 32
 102:	93 9f       	mul	r25, r19
 104:	c0 01       	movw	r24, r0
 106:	11 24       	eor	r1, r1
 108:	82 2b       	or	r24, r18
 10a:	87 b9       	out	0x07, r24	; 7


//-----------------------triggering source in case of auto triggering enable------------------------------
SFIOR &=0b00011111;
 10c:	80 b7       	in	r24, 0x30	; 48
 10e:	8f 71       	andi	r24, 0x1F	; 31
 110:	80 bf       	out	0x30, r24	; 48
SFIOR |=(ADC_config.Trigger_src<<SFIOR_ADTS0);
 112:	20 b7       	in	r18, 0x30	; 48
 114:	99 81       	ldd	r25, Y+1	; 0x01
 116:	30 e2       	ldi	r19, 0x20	; 32
 118:	93 9f       	mul	r25, r19
 11a:	c0 01       	movw	r24, r0
 11c:	11 24       	eor	r1, r1
 11e:	82 2b       	or	r24, r18
 120:	80 bf       	out	0x30, r24	; 48
//-------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------
}
 122:	27 96       	adiw	r28, 0x07	; 7
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	f8 94       	cli
 128:	de bf       	out	0x3e, r29	; 62
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	cd bf       	out	0x3d, r28	; 61
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <DIO_SetPortDirection>:
	}
	return x;
}
extern void DIO_SetPortDirection(u8 port,u8 Dir)
{
	switch(port)
 134:	81 30       	cpi	r24, 0x01	; 1
 136:	79 f0       	breq	.+30     	; 0x156 <DIO_SetPortDirection+0x22>
 138:	28 f0       	brcs	.+10     	; 0x144 <DIO_SetPortDirection+0x10>
 13a:	82 30       	cpi	r24, 0x02	; 2
 13c:	a9 f0       	breq	.+42     	; 0x168 <DIO_SetPortDirection+0x34>
 13e:	83 30       	cpi	r24, 0x03	; 3
 140:	e1 f0       	breq	.+56     	; 0x17a <DIO_SetPortDirection+0x46>
 142:	08 95       	ret
	{
		case a :
		if (Dir == OUTPUT)
 144:	61 30       	cpi	r22, 0x01	; 1
 146:	19 f4       	brne	.+6      	; 0x14e <DIO_SetPortDirection+0x1a>
		{
			DDRA=0XFF;	
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	8a bb       	out	0x1a, r24	; 26
 14c:	08 95       	ret
		}
		if (Dir == INPUT)
 14e:	61 11       	cpse	r22, r1
 150:	1c c0       	rjmp	.+56     	; 0x18a <DIO_SetPortDirection+0x56>
		{
			DDRA=0X00;
 152:	1a ba       	out	0x1a, r1	; 26
 154:	08 95       	ret
		}
		break;
		case b :
		if (Dir == OUTPUT)
 156:	61 30       	cpi	r22, 0x01	; 1
 158:	19 f4       	brne	.+6      	; 0x160 <DIO_SetPortDirection+0x2c>
		{
			DDRB=0XFF;
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	87 bb       	out	0x17, r24	; 23
 15e:	08 95       	ret
		}
		if (Dir == INPUT)
 160:	61 11       	cpse	r22, r1
 162:	13 c0       	rjmp	.+38     	; 0x18a <DIO_SetPortDirection+0x56>
		{
			DDRB=0X00;
 164:	17 ba       	out	0x17, r1	; 23
 166:	08 95       	ret
		}
		break;
		case c :
		if (Dir == OUTPUT)
 168:	61 30       	cpi	r22, 0x01	; 1
 16a:	19 f4       	brne	.+6      	; 0x172 <DIO_SetPortDirection+0x3e>
		{
			DDRC=0XFF;
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	84 bb       	out	0x14, r24	; 20
 170:	08 95       	ret
		}
		if (Dir == INPUT)
 172:	61 11       	cpse	r22, r1
 174:	0a c0       	rjmp	.+20     	; 0x18a <DIO_SetPortDirection+0x56>
		{
			DDRC=0X00;
 176:	14 ba       	out	0x14, r1	; 20
 178:	08 95       	ret
		}
		break;
		case d :
		if (Dir == OUTPUT)
 17a:	61 30       	cpi	r22, 0x01	; 1
 17c:	19 f4       	brne	.+6      	; 0x184 <DIO_SetPortDirection+0x50>
		{
			DDRD=0XFF;
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	81 bb       	out	0x11, r24	; 17
 182:	08 95       	ret
		}
		if (Dir == INPUT)
 184:	61 11       	cpse	r22, r1
 186:	01 c0       	rjmp	.+2      	; 0x18a <DIO_SetPortDirection+0x56>
		{
			DDRD=0X00;
 188:	11 ba       	out	0x11, r1	; 17
 18a:	08 95       	ret

0000018c <DIO_WritePortValue>:
		break;
	}
}
extern void DIO_WritePortValue(u8 port,u8 value)
{
	switch(port)
 18c:	81 30       	cpi	r24, 0x01	; 1
 18e:	41 f0       	breq	.+16     	; 0x1a0 <DIO_WritePortValue+0x14>
 190:	28 f0       	brcs	.+10     	; 0x19c <DIO_WritePortValue+0x10>
 192:	82 30       	cpi	r24, 0x02	; 2
 194:	39 f0       	breq	.+14     	; 0x1a4 <DIO_WritePortValue+0x18>
 196:	83 30       	cpi	r24, 0x03	; 3
 198:	39 f0       	breq	.+14     	; 0x1a8 <DIO_WritePortValue+0x1c>
 19a:	08 95       	ret
	{
		case a :
		PORTA =value;
 19c:	6b bb       	out	0x1b, r22	; 27
		break;
 19e:	08 95       	ret
		case b :
		PORTB=value;
 1a0:	68 bb       	out	0x18, r22	; 24
		break;
 1a2:	08 95       	ret
		case c :
		PORTC=value;
 1a4:	65 bb       	out	0x15, r22	; 21
		break;
 1a6:	08 95       	ret
		case d :
		PORTD=value;
 1a8:	62 bb       	out	0x12, r22	; 18
 1aa:	08 95       	ret

000001ac <main>:
#include "util/delay.h"
#include "DIO.h"
#include "ADC.h"

int main(void)
{  
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	cd b7       	in	r28, 0x3d	; 61
 1b2:	de b7       	in	r29, 0x3e	; 62
 1b4:	27 97       	sbiw	r28, 0x07	; 7
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	f8 94       	cli
 1ba:	de bf       	out	0x3e, r29	; 62
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPortDirection(a,INPUT);
 1c0:	60 e0       	ldi	r22, 0x00	; 0
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	0e 94 9a 00 	call	0x134	; 0x134 <DIO_SetPortDirection>
	DIO_SetPortDirection(c,OUTPUT);
 1c8:	61 e0       	ldi	r22, 0x01	; 1
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	0e 94 9a 00 	call	0x134	; 0x134 <DIO_SetPortDirection>
	DIO_SetPortDirection(d,OUTPUT);
 1d0:	61 e0       	ldi	r22, 0x01	; 1
 1d2:	83 e0       	ldi	r24, 0x03	; 3
 1d4:	0e 94 9a 00 	call	0x134	; 0x134 <DIO_SetPortDirection>
	struct S_ADC_cofiguration config;
	config.autoTrigger_enable=autoTrigger_Disable;  // single conversion  mode 
 1d8:	1f 82       	std	Y+7, r1	; 0x07
	config.Channels=S_ADC0;    // single ended mode
 1da:	1b 82       	std	Y+3, r1	; 0x03
	config.Clock_selector=clk_128;  // prescale dividing by 128
 1dc:	87 e0       	ldi	r24, 0x07	; 7
 1de:	8d 83       	std	Y+5, r24	; 0x05
	config.Interrupt_Enable=interrupt_enable;  // enable ADC interrupt 
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	8e 83       	std	Y+6, r24	; 0x06
	config.Register_Shift=right;  // ADCL and ADCH 
 1e4:	1c 82       	std	Y+4, r1	; 0x04
	config.Vref_selector=internal_with_extCapacitor;  // Vref 2.56v
 1e6:	83 e0       	ldi	r24, 0x03	; 3
 1e8:	8a 83       	std	Y+2, r24	; 0x02
	ADC_enable();
 1ea:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_enable>
	ADC_init(config);
 1ee:	29 81       	ldd	r18, Y+1	; 0x01
 1f0:	3a 81       	ldd	r19, Y+2	; 0x02
 1f2:	4b 81       	ldd	r20, Y+3	; 0x03
 1f4:	5c 81       	ldd	r21, Y+4	; 0x04
 1f6:	6d 81       	ldd	r22, Y+5	; 0x05
 1f8:	7e 81       	ldd	r23, Y+6	; 0x06
 1fa:	8f 81       	ldd	r24, Y+7	; 0x07
 1fc:	0e 94 42 00 	call	0x84	; 0x84 <ADC_init>
	sei();
 200:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 202:	2f e9       	ldi	r18, 0x9F	; 159
 204:	86 e8       	ldi	r24, 0x86	; 134
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	21 50       	subi	r18, 0x01	; 1
 20a:	80 40       	sbci	r24, 0x00	; 0
 20c:	90 40       	sbci	r25, 0x00	; 0
 20e:	e1 f7       	brne	.-8      	; 0x208 <main+0x5c>
 210:	00 c0       	rjmp	.+0      	; 0x212 <main+0x66>
 212:	00 00       	nop
    
    while (1) 
    {   
		_delay_ms(500);
		DIO_WritePortValue(d,0x00);
 214:	60 e0       	ldi	r22, 0x00	; 0
 216:	83 e0       	ldi	r24, 0x03	; 3
 218:	0e 94 c6 00 	call	0x18c	; 0x18c <DIO_WritePortValue>
		DIO_WritePortValue(c,0x00);
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	82 e0       	ldi	r24, 0x02	; 2
 220:	0e 94 c6 00 	call	0x18c	; 0x18c <DIO_WritePortValue>
 224:	2f e9       	ldi	r18, 0x9F	; 159
 226:	86 e8       	ldi	r24, 0x86	; 134
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	21 50       	subi	r18, 0x01	; 1
 22c:	80 40       	sbci	r24, 0x00	; 0
 22e:	90 40       	sbci	r25, 0x00	; 0
 230:	e1 f7       	brne	.-8      	; 0x22a <main+0x7e>
 232:	00 c0       	rjmp	.+0      	; 0x234 <main+0x88>
 234:	00 00       	nop
		_delay_ms(500);
		ADC_start_convertion();
 236:	0e 94 40 00 	call	0x80	; 0x80 <ADC_start_convertion>
 23a:	e3 cf       	rjmp	.-58     	; 0x202 <main+0x56>

0000023c <__vector_16>:
		//_delay_ms(1000);
    }
	
}
ISR(ADC_vect)
{
 23c:	1f 92       	push	r1
 23e:	0f 92       	push	r0
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	0f 92       	push	r0
 244:	11 24       	eor	r1, r1
 246:	2f 93       	push	r18
 248:	3f 93       	push	r19
 24a:	4f 93       	push	r20
 24c:	5f 93       	push	r21
 24e:	6f 93       	push	r22
 250:	7f 93       	push	r23
 252:	8f 93       	push	r24
 254:	9f 93       	push	r25
 256:	af 93       	push	r26
 258:	bf 93       	push	r27
 25a:	ef 93       	push	r30
 25c:	ff 93       	push	r31
	DIO_WritePortValue(d,ADCL);
 25e:	64 b1       	in	r22, 0x04	; 4
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	0e 94 c6 00 	call	0x18c	; 0x18c <DIO_WritePortValue>
	DIO_WritePortValue(c,ADCH);
 266:	65 b1       	in	r22, 0x05	; 5
 268:	82 e0       	ldi	r24, 0x02	; 2
 26a:	0e 94 c6 00 	call	0x18c	; 0x18c <DIO_WritePortValue>
 26e:	87 e8       	ldi	r24, 0x87	; 135
 270:	93 e1       	ldi	r25, 0x13	; 19
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <__vector_16+0x36>
 276:	00 c0       	rjmp	.+0      	; 0x278 <__vector_16+0x3c>
 278:	00 00       	nop
	_delay_ms(20);
}
 27a:	ff 91       	pop	r31
 27c:	ef 91       	pop	r30
 27e:	bf 91       	pop	r27
 280:	af 91       	pop	r26
 282:	9f 91       	pop	r25
 284:	8f 91       	pop	r24
 286:	7f 91       	pop	r23
 288:	6f 91       	pop	r22
 28a:	5f 91       	pop	r21
 28c:	4f 91       	pop	r20
 28e:	3f 91       	pop	r19
 290:	2f 91       	pop	r18
 292:	0f 90       	pop	r0
 294:	0f be       	out	0x3f, r0	; 63
 296:	0f 90       	pop	r0
 298:	1f 90       	pop	r1
 29a:	18 95       	reti

0000029c <_exit>:
 29c:	f8 94       	cli

0000029e <__stop_program>:
 29e:	ff cf       	rjmp	.-2      	; 0x29e <__stop_program>
